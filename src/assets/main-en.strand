::start
// some info for if you want to mod it:
//
// basic syntax examples:
// 	::passage title
// 	[[basic link]]
// 	[[link with different label>passage title]]
// 	[[link with different action|this.something=true;this.goto('passage title');]]
// 	<<if this.something>><<elseif this.somethingElse>><<endif>>
// 	<<do this.something=true;>>
// 	<<print this.something>>
// 	>passage break
//
// js examples:
// 	this.goto('passage')
// 	this.show('texture', { duration, x, y, scale, animate, freq })
// 	this.scrim(amount, duration)
// 	this.tween(object, 'property', to, duration, from, ease)
// 	this.gameObject - npc/interrupt that triggered the dialog
// 	this.scene      - game scene
// 	this.voice      - audio to play as letters tick in
// 	this.ease       - easing functions
//
// game object stuff:
// 	this.Area(name, [objects])
// 	this.Npc({ passage, x, y )
// 	this.Goto({ area, x, y }, { x, y, width, height })
// 	this.Prop({ texture, x, y, alpha, scale, flip, blur, animate, offset })
// 	this.PropParallax({ texture, alpha, scale, flip, blur, mult, animate, offset }),
// 	this.Block({ x, y, width, height, type, radius })
// 	this.Poly({ x, y, width, verts })
// 	this.Interrupt({ passage, x, y, width, height })

<<if !this.started>>
<<do
	// save location on refresh when debugging
	if (this.debug && !window.debugUnload) {
		window.debugUnload = true;
		window.addEventListener('beforeunload', () => {
			// if (window.scene.strand.cleared) return;
			// window.scene.strand.savestate.area = window.scene.strand.scene.area;
			// window.scene.strand.savestate.x = window.scene.strand.scene.player.transform.x;
			// window.scene.strand.savestate.y = window.scene.strand.scene.player.transform.y;
			// window.scene.strand.save();
		});
	}
	// middle mouse click to go back in debug
	if (this.debug && !window.debugBack) {
		window.debugBack = true;
		window.addEventListener('pointerdown', (event) => {
			if (event.button === 1) {
				window.scene.strand.back();
			}
		});
	}

	const PropParallaxAuto = (options) => {
		const start = Date.now();
		const gameObject = this.PropParallax(options);
		gameObject.scripts.push({
			gameObject,
			update() {
				gameObject.spr.tilePosition.x = (Date.now()-start)/1000 * options.speed;
			},
		});
		return gameObject;
	};

	this.Area('empty', []);
	this.Area('no one', [

		(() => {
			const h = this.Hotspot({ label: 'no one', texture: 'blank', x: 27, y: -214, offset: 10000, use: {
				undefined: ['goto:request'],
				'moon-dried tomato': ['goto:give tomato'],
				'soap': ['goto:give soap'],
				'half-eaten tuna fish sandwich': ['goto:give sandwich'],
			}, });
			this.noone = h;
			h.spr.width = 200;
			h.spr.height = 200;
			return h;
		})(),

		this.Prop({ freq: 1/100, texture: 'no one Head', x: 112, y: -48, offset: 1000 }),
		this.Prop({ freq: 1/200, texture: 'no one UL', y: -112, offset: 500 }),
		this.Prop({ freq: 1/190, texture: 'no one LL', offset: 2000 }),
		this.Prop({ freq: 1/180, texture: 'no one LR', x: 248, offset: 1500 }),

		this.Updater(() => {
			if (this.gameObject === this.noone) {
				const t = game.app.ticker.lastTime;
				this.scene.dialogue.voice = 'No one';
				this.scene.dialogue.strText = this.scene.dialogue.strText.split('').map((i, idx) => Math.floor(idx/5 -t/300 - Math.sin(t/300)*0.5 - Math.sin(t/400)*0.2) % 3 ? i.toLowerCase() : i.toUpperCase()).join('');
			} else {
				this.scene.dialogue.voice = 'Default';
			}
		}),
	]);
	this.Area('menu', [
		this.Prop({ texture: 'mat', x: 0, y: -46, offset: -10000 }),
		this.Prop({ texture: 'doorClosed', x: 0, y: -128, offset: -10000 }),
		this.Prop({ texture: 'doorOpen', freq: 1/200, alpha: 0, x: 0, y: -128, offset: -10000 }),
		this.Prop({ name: 'playerText', texture: 'blank', x: -74, y: -154, offset: -10000 }),
		this.nooneMenu = this.Prop({ name: 'nooneText', texture: 'blank', x: 58, y: -335, offset: -10000 }),
		(() => {
			const h = this.Hotspot({ label: 'start', texture: 'blank', x: -2, y: -228, offset: 10000, use: {
				undefined: ['goto:start game'],
			}, });
			h.spr.width = 100;
			h.spr.height = 160;
			return h;
		})(),
		(() => {
			const h = this.Hotspot({ label: 'about', texture: 'blank', x: -4, y: -45, offset: 10000, use: {
				undefined: ['goto:credits'],
			}, });
			h.spr.width = 300;
			h.spr.height = 80;
			return h;
		})(),

		this.Updater(() => {
			if (this.gameObject === this.nooneMenu) {
				const t = game.app.ticker.lastTime;
				this.scene.dialogue.voice = 'No one';
				this.scene.dialogue.strText = this.scene.dialogue.strText.split('').map((i, idx) => Math.floor(idx/5 -t/300 - Math.sin(t/300)*0.5 - Math.sin(t/400)*0.2) % 3 ? i.toLowerCase() : i.toUpperCase()).join('');
			} else {
				this.scene.dialogue.voice = 'Default';
			}
		}),
	]);

	this.Area('ending', [
		this.Prop({ texture: 'mat', x: 0, y: -46, offset: -10000 }),
		this.Prop({ texture: 'doorClosed', x: 0, y: -128, offset: -10000 }),
		this.Prop({ texture: 'doorOpen', freq: 1/200, alpha: 0, x: 0, y: -128, offset: -10000 }),
		this.Prop({ name: 'playerText', texture: 'blank', x: -74, y: -154, offset: -10000 }),
	]);

	this.Area('credits', [
		this.Text(`
		made by Sean, Michael & IAN
		of Sweetâ™¥Heart Squad \n
		for	A Game By Its Cover 2023\n
		based on Famicase artwork
		by AQUILES`, { x: 0, y: -400}),
		this.Text(`BACK`, { x: -260, y: -475}),
		this.Prop({ texture: 'toctoc_white', x: 5, y: -410}),
		this.Hotspot({ label: 'more games', texture: 'SweetHeart Squad', x: -96, y: -30, offset: 10000, use: {
			undefined: ['goto:credits-sweetheartsquad'],
		}, }),
		this.Hotspot({ label: 'based on Famicase artwork\nby AQUILES', texture: 'AQUILES', x: 103, y: -30, offset: 10000, use: {
			undefined: ['goto:credits-aquiles'],
		}, }),
		this.Hotspot({label: 'back', x: -260, y: -455, offset: 10000, use: {
			undefined: ['goto:credits-back'],
		}, }),
	]);

	const rays = () => {
		let slGodRay = this.Prop({ texture: 'godRayL', x: -270, y: 0, offset: 1000000 });
		let scGodRay = this.Prop({ texture: 'godRayC', x: -160, y: -122, offset: 1000000 });
		let srGodRay = this.Prop({ texture: 'godRayR', x: -43, y: -222, offset: 1000000 });
		return [
			slGodRay,
			scGodRay,
			srGodRay,
			this.Updater(() => {
				slGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 1.0)*0.1 + 0.25;
				scGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 0.5)*0.1 + 0.25;
				srGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 0.0)*0.1 + 0.25;
			}),
		];
	};

	const Rockspot = ({ spot, x, y }) => {
		const h = this.Hotspot({ label: 'spot', texture: 'stone_tile', offset: -100, x, y, use: {
			undefined: [`p:"looks like something could go here"`],
			thimble: [`p:"it's too big for the tile"`],
			die: [`p:"it's too big for the tile"`],
			glass: [`p:"that's not a short cut"`],
			hat: [`p:"i'm getting ahead of myself"`],
			'big rock': ['goto:place big rock'],
			'medium rock': ['goto:place medium rock'],
			'little rock': ['goto:place little rock'],
		}, });
		h.spot = spot;
		return h;
	};

	this.flamingoMouthPoly = this.Poly({ verts: [37,-319, 18,-261, 40,-234, 75,-257, 131,-264, 209,-272, 239,-286] });
	this.Area('gnome puzzle', [
		// border
		this.Poly({ verts: [205,-275, 17,-290, -90,-287, -217,-247, -292,-175, -328,-93, -296,-38, -121,-14, 93,-11, 238,-55, 253,-98, 268,-184, 242,-238, 201,-276] }),
		this.flamingoMouthPoly,

		this.Prop({ texture: 'bg_gnome_puzzle_open_BACK', offset: -1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_FORE', offset: 1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_closed_BACK', offset: -1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_worm_gone', x: -303, y: -182, offset: 0 }),
		this.Hotspot({ label: 'worm', texture: 'bg_gnome_puzzle_worm', x: -286, y: -159, offset: 0, use: {
			hat: ['goto:worm hat'],
			undefined: [`"wish i had a hat to go out in"`, `"i wanna look good before i head out"`],
			die: [`"i don't have hands dude"`],
			thimble: [`"kind of a bummer hat no offense"`],
			glass: [`"whoa dude don't hurt me"`],
			'safety pin': [`"whoa dude don't hurt me"`],
			'cut flower': [`"im not really a flower guy"`],
			'little rock': [`"you gonna finish that?"`],
			'medium rock': [`"you gonna finish that?"`],
			'big rock': [`"you gonna finish that?"`],
		}, }),

		this.Hotspot({ label: 'flower', texture: 'bg_gnome_puzzle_flower', x: -57, y: -266, offset: -10, use: {
			glass: ['goto:cut flower'],
			undefined: [`p:"cute flower!"`],
			thimble: [`p:"i think it's a daisy, not a thimble flower"`],
			'little rock': [`p:"i don't want to crush it"`],
			'medium rock': [`p:"i don't want to crush it"`],
			'big rock': [`p:"i don't want to crush it"`],
			'safety pin': [`p:"it's tough to cut it with that"`],
		}, }),

		this.Hotspot({ label: 'leaf', texture: 'leaf', x: 122, y: -175, offset: 10, use: {
			undefined: ['goto:move leaf'],
			other: [`p:"i can probably just move it with my hands"`],
		}, }),

		this.Npc({ name: 'fiery gnome', body: 'gnome_top', tint: 0xcd836f, x: -162, y: -224, use: {
			'die': [`"no time for games!"`],
			'glass': [`"hey! watch where you swing that!"`],
			'safety pin': [`"hey! watch where you swing that!"`],
			undefined: [`"i know where the rocks go!"`,`"don't listen to the other guy."`, `"we'll never get into the temple..."`, `"ugh, that worm creeps me out..."`],
			'medium rock': [`"hey! that's my- oh, maybe not."`],
			thimble: [`"i don't need a new hat!"`],
			hat: [`"i don't need a new hat!"`],
			'cut flower': [`"that's cute. i hate it!"`],
		}, }),
		this.Npc({ name: 'numb gnome', body: 'gnome_bottom', tint: 0x6f79cd, x: 180, y: -100, flip: true, use: {
			'cut flower': [`goto:remove-hat`],
			'die': [`"don't wanna play dice right now."`],
			'thimble': [`"cool hat. too big for me though..."`],
			'glass': [`"careful with that..."`],
			'safety pin': [`"hmm, that's not really a hat..."`],
			undefined: [`"he won't put his rock on that tile..."`,`"my solution is right but whatever..."`,`"i hope there's a cute hat in there..."`],
			'medium rock': [`"oh, you have one too..."`],
			hat: [`"nah... i like the new one better"`],
		}, }),

		this.Item({ texture: 'big rock', x: -109, y: -219, use: {
			undefined: ['goto:take big rock'],
			player: [`"it's a rock"`],
			'cut flower': [`p:"i don't want to crush it"`],
			'little rock': [`p:"wouldn't want to get between these two"`],
			'medium rock': [`p:"wouldn't want to get between these two"`],
			glass: [`p:"not a house, but i still shouldn't throw it"`],
			die: [`p:"rock and roll!"`],
		}, }),
		this.Item({ texture: 'little rock', x: 100, y: -110, use: {
			undefined: ['goto:take little rock'],
			player: [`"it's a rock"`],
			'cut flower': [`p:"i don't want to crush it"`],
			'big rock': [`p:"wouldn't want to get between these two"`],
			'medium rock': [`p:"wouldn't want to get between these two"`],
			glass: [`p:"not a house, but i still shouldn't throw it"`],
			die: [`p:"rock and roll!"`],
		}, }),
		this.glassPoly = this.Poly({ verts: [-179,-82, -209,-84, -205,-66, -179,-84], width: 10 }),
		this.Item({ texture: 'glass', x: -190, y: -50, offset: -35, use: {
			player: [`"it's a sharp piece of broken glass"`],
			'little rock': [`p:"not a house, but i still shouldn't throw it"`],
			'medium rock': [`p:"not a house, but i still shouldn't throw it"`],
			'big rock': [`p:"not a house, but i still shouldn't throw it"`],
			die: [`p:"that's not how die cuts work"`],
			'safety pin': [`p:"they're both pretty sharp..."`],
		}, }),

		//junk
		this.Item({ texture: 'thimble', x: 290, y: -20, offset: 10000000, use: {
			player: [`"it's a thimble"`],
			die: [`p:"yahtzee!"`],
			'cut flower': [`p:"i think it's a daisy, not a thimble flower"`],
			'safety pin': [`p:"wrong type of needle for that"`],
			hat: [`p:"fashion is so complicated"`],
		}, }),
		this.Item({ texture: 'die', x: -304, y: -103, offset: 100000000, use: {
			player: [`"it's a six-sided die"`],
			thimble: [`p:"yahtzee!"`],
			'little rock': [`p:"rock and roll!"`],
			'medium rock': [`p:"rock and roll!"`],
			'big rock': [`p:"rock and roll!"`],
			glass: [`p:"that's not how die cuts work"`],
			other: [`p:"now's not the time to be playing around"`],
			otherTarget: [`p:"now's not the time to be playing around"`],
		}, }),
		this.Item({ texture: 'safety pin', x: 50, y: -50, offset: -35, use: {
			player: [`"it's a safety pin"`],
			'cut flower': [`p:"it's too big for that"`],
			glass: [`p:"they're both pretty sharp..."`],
			thimble: [`p:"wrong type of needle for that"`],
			hat: [`p:"it doesn't need a pin to stay on"`],
		}, }),
		this.Hotspot({ label: 'dragonfly', texture: 'dragonfly', x: 261, y:-290, offset: 100000000, use: {
			undefined: ['p:"what a pretty dragonfly..."'],
			glass: [`p:"i don't wanna hurt it..."`],
			die: [`p:"i don't think it wants to play"`],
			thimble: [`p:"i don't think it can sew"`],
			'safety pin': [`p:"the pin kinda looks like a wing..."`],
		}, }),

		(() => {
			const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: 134, y: -240, use: {
				other: [`goto:flamingo`],
			}, });
			h.spr.width = 200;
			h.spr.height = 200;
			return h;
		})(),




		Rockspot({ spot: '11', x: -110, y: -125, }),
		Rockspot({ spot: '12', x: -64,  y: -149, }),
		Rockspot({ spot: '13', x: -25,  y: -171, }),
		Rockspot({ spot: '21', x: -67,  y: -97, }),
		Rockspot({ spot: '22', x: -23,  y: -121, }),
		Rockspot({ spot: '23', x: 23,   y: -146, }),
		Rockspot({ spot: '31', x: -20,  y: -69, }),
		Rockspot({ spot: '32', x: 27,   y: -95, }),
		Rockspot({ spot: '33', x: 70,   y: -120, }),
	]);

	this.Area('tomato', [
		this.Prop({ texture: 'tomatoRoom', offset: -1000000 }),
		this.Item({ label: 'moon-dried tomato', texture: 'tomatoItem', x: 135, y: -347, use: {
			undefined: ['goto:moon-dried tomato'],
			player: ['goto:no one item cancel'],
		} }),
		...rays(),
	]);

	this.HookItem = (props) => {
		const i = this.Item({ ...props, offset: 100000 - props.hookY });
		i.display.container.pivot.y = -props.hookY;
		i.hookY = props.hookY;
		i.scripts.push({
			gameObject: i,
			update() {
				this.gameObject.spr.scale.x = Math.abs(this.gameObject.spr.scale.x) * ((this.gameObject.transform.x > 0 && this.gameObject.transform.x < 290) ? 1 : -1);
			},
		});
		return i;
	};

	this.HookSpot = (props, item) => {
		const h = this.Hotspot({ texture: 'hook', x: props.x, y: props.y, offset: 100000, use: {
			undefined: [`p:"it's hook on the wall"`, `p:"looks like it could hold something"`, `p:"there's a bunch of these hooks here"`],
			'cowboy hat': ['goto:place on hook'],
			'poster': ['goto:place on hook'],
			'horseshoe': ['goto:place on hook'],
			'rope': ['goto:place on hook'],
			'wheel': ['goto:place on hook'],
			other: [`p:"i don't see how to hook it up"`],
		}, });
		h.display.container.pivot.y = -15;
		h.spot = props.spot;
		h.scripts.push({
			gameObject: h,
			update() {
				this.gameObject.spr.scale.x = Math.abs(this.gameObject.spr.scale.x) * ((this.gameObject.transform.x > 0 && this.gameObject.transform.x < 290) ? 1 : -1);
			},
		});
		if (item) {
			h.item = item.name;
			item.transform.x = h.transform.x;
			item.transform.y = h.transform.y;
			item.hookspot = h;
			h.btn.enabled = false;
			return [h, item];
		}
		return [h];
	};

	this.Area('dustbun heist', [
		// main walls
		this.Poly({ verts: [-247,-132, -74,-239, 58,-241, 162,-283, 348,-153, -2,-4, -249,-122] }),

		this.Prop({ texture: 'heist_bg', offset: -1000000 }),
		this.Prop({ texture: 'heist_vault', x: -212, y: -84, offset: -168 }),
		this.Prop({ texture: 'heist_window', x: 0, y: -211, offset: -66 }),
		this.Prop({ texture: 'heist_tubes', x: 237, y: -198, offset: -40 }),
		this.Prop({ texture: 'chandelier', x: -94, y: -320, offset: 1000 }),
		this.Poly({ verts: [-214,-117, -193,-140] }), // tnt
		this.Hotspot({ texture: 'tnt', x: -202, y: -109, offset: -25, use: {
			undefined: [`p:"are they gonna blow the door?"`, `p:"high-power explosives really change a room's energy"`, `p:"i'm having a blast, how about you?"`, `p:"...sorry, that one was a dud"`],
			candle: [`p:"um!!! bad idea"`, `p:"i'd rather not blow up!!"`, `p:"if only there was a way to do that remotely..."`],
			oil: [`p:"tnt doesn't need more grease"`],
			rope: [`p:"that's what the fuse is for"`],
			'cowboy hat': [`p:"it's out of style to wear a hat with bangs"`],
			'bread slice': [`p:"there are better ways to make toast"`],
		}, }),
		this.Prop({ texture: 'fuse', x: -146, y: -80, offset: -60 }),
		this.Hotspot({ label: 'fuse', texture: 'spark', freq: 1/50, alpha: 0, x: -73, y: -80, offset: -5, use: {
			undefined: [`p:"it's a fuse"`, `p:"it's definitely a fuse"`, `p:"i'm not confused"`, `p:"...my fuse is shorter than this"`],
			candle: ['goto:light fuse'],
			oil: [`p:"i dunno if that would make it burn better or worse"`, `p:"either way, not gonna try it"`],
			rope: [`p:"i think the fuse is long enough"`],
			other: [`p:"that's not gonna light it"`, `p:"fusing those won't do anything"`],
		}, }),

		this.Poly({ verts: [221,-114, 253,-120, 233,-133] }), // oil
		this.Item({ texture: 'oil', x: 235, y: -114, offset: 0, use: {
			player: [`p:"smells like... paint thinner?"`, `p:"really hope i don't run into a snake"`],
			undefined: ['goto:take oil'],
			other: [`goto:use on oil`],
			otherTarget: [`p:"that doesn't need oiling"`],
		}, }),

		this.Hotspot({ label: 'trophy mount', texture: 'beetle', x: 184, y: -317, use: {
			undefined: [`p:"gross..."`, `p:"there's a little plaque near the bottom"`, `p:"says 'Megasoma Elephas'"`],
			candle: [`p:"bit late for a pyre"`],
			'cowboy hat': [`p:"the horn would get in the way"`],
			rope: [`p:"someone already caught it"`],
			horseshoe: [`p:"it'd need feet for that"`],
		}, }),

		this.Hotspot({ texture: 'peanut', x: 168, y: -239, offset: -5, use: {
			undefined: [`p:"that's a lotta nut!"`, `p:"it is a peanut"`, `p:"it looks kinda mushy..."`],
			candle: [`p:"a hot nut never helped anyone"`],
			rope: [`p:"why would i tie up someone's nut?"`],
			wheel: [`p:"maybe a whole wagon could crush it... oh well"`],
			horseshoe: [`p:"i'm not heavy enough to just step on it"`],
		}, }),

		this.Poly({ verts: [-44,-39, 18,-13] }), // shelf
		this.Prop({ texture: 'shelf', y: -11, offset: 9000 + 11 }),
		this.Hotspot({ texture: 'bread', x: -30, y: -100, offset: 10000, use: {
			undefined: [`p:"it's a bread box"`, `p:"it's shut tight"`, `p:"i thought this was a bank, not a bakery..."`],
			other: [`p:"that won't help get that bread"`],
		}, }),

		this.Hotspot({ label: 'vault', texture: 'heist_vault_door', x: -170, y: -152, offset: -75, use: {
			undefined: ['goto:open vault'],
			oil: ['goto:oil vault'],
			wheel: [`p:"yep. they're both circles."`, `p:"i see zero other connection here"`],
			candle: [`p:"it'd need to be much hotter to burn that"`],
			other: [`p:"that's not gonna open it"`],
		}, }),

		this.Npc({ name: 'snake oil\nsalesbun', body: 'dustbun_oil', tint: 0x746568, x: 290, y: -130, shadow: false, flip: true, use: {
			undefined: [`"can't believe dis..."`, `"past lunch already..."`, `"s'posed to be makin' deals today"`, `"got me waitin' on steals..."`],
			'bread slice': ['goto:give bread'],
			poster: [`"dat reward's nuddin ta sneeze at"`, `"nah... let da sheriff deal with dat"`],
			candle: [`"ey watch it, dat's hot!!"`],
			rope: [`p:"they probably wouldn't appreciate being tied up"`],
			'cowboy hat': [`"no thanks, i prefer oiling my tufts up"`],
			other: [`"get outta here with dat junk!"`, `"dis trash ain't worth dust..."`, `"more trash? where's da dough?!"`],
		}, }),
		this.Npc({ name: 'scared hare', body: 'dustbun_scared', tint: 0x746568, x: -30, y: -215, flip: true, use: {
			other: [`"oh golly gee oh no oh no"`, `"ohh dear betsy buggy sue protect me"`, `"ohhhhh nooooo"`, `p:"...they seem a bit pre-occupied"`],
		}, }),
		this.Npc({ name: 'crook', body: 'dustbun_boss', tint: 0x9485A2, x: 125, y: -215, flip: true, use: {
			undefined: [`"if dat vault ain't open on da count of five..."`, `"one..."`, `"two..."`, `"tree....."`, `"fohhh......."`, `"...you tink ahm kiddin' around!?"`, `"ah won't say it again!"`],
			poster: [`"not a bad likeness"`, `"gonna try ta claim dat reward?"`, `"hehehe, don't make me laugh"`],
			rope: [`p:"i think they'd overpower me..."`, `p:"better knot risk it"`],
			'cowboy hat': [`"'preciate da gesture, but not mah colour"`],
			candle: [`"pa never tell ya not ta play with fire?"`, `"mine neither, heh"`],
			oil: [`"gotta respect da classics"`, `"ah go for bigger scores dese days"`],
			'bread slice': [`"no thanks, ah ate before we came"`, `"nevah do a heist on an empty stomach"`],
		}, }),
		this.Npc({ name: 'mook', body: 'dustbun_mook', tint: 0xE6E2A4, x: -139, y: -115, use: {
			undefined: [`"ey step back kiddo"`, `"dis stuff's dangerous"`],
			rope: [`p:"i think they'd overpower me..."`, `p:"better knot risk it"`],
			'cowboy hat': [`"hats're more da boss's style"`],
			candle: [`"uh. c-careful with dat."`, `"s-seriously..."`],
			'bread slice': [`"da boss don't let me eat on da job"`],
			poster: [`"how come da boss gets all da credit..."`],
		}, }),
		this.Npc({ name: 'teller', body: 'dustbun_teller', tint: 0xC6A89D, shadow: false, offset: -100, x: 94, y: -247, use: {
			undefined: [`"i told ya, da door's stuck!"`, `"already unlocked, nuddin else ta do!"`, `"arghh won't anybunny help me??"`],
			other: [`p:"nah, they're pretty locked up in there"`],
		}, }),

		this.Hotspot({ texture: 'ladder', x: 45, y: -36, offset: 1000, use: {
			undefined: [`p:"a rickety, rotten ladder"`, `"i'm not gonna step on that"`],
			rope: [`p:"that's not how you make a rope ladder"`],
			other: [`p:"that won't work... i gotta step it up"`],
		}, }),

		...this.HookSpot({ spot: 'r1', x: 45, y: -144 },
			// empty
		),
		...this.HookSpot({ spot: 'r2', x: 177, y: -190 },
			this.HookItem({ texture: 'rope', hookY: 128, use: {
				player: [`p:"nice rope"`, `p:"probably strong enough for a tightrope act"`, `p:"it's rope"`],
				'cowboy hat': [`p:"just missing the cow"`],
				candle: [`p:"bit overkill for a wick"`],
				horseshoe: [`p:"those shoes don't need laces"`],
				wheel: [`p:"uhh... reel wope? no, that's nothing"`],
			}, }),
		),
		...this.HookSpot({ spot: 'r3', x: 287, y: -231 },
			this.HookItem({ texture: 'horseshoe', hookY: 30, use: {
				player: [`p:"do they even have horses here?"`, `p:"it's a lucky horseshoe!"`],
				rope: [`p:"those shoes don't need laces"`],
				other: [`p:"nah, might be bad luck"`],
				otherTarget: [`p:"nah, might be bad luck"`],
			}, }),
		),
		...this.HookSpot({ spot: 'r4', x: 299, y: -335 },
			this.HookItem({ texture: 'poster', hookY: 37, use: {
				player: [`p:"says 'WANTED - REWARD 100 BARS'"`, `p:"now where have i seen that face before..."`],
				candle: [`p:"got a feeling that would also be a crime"`],
			}, }),
		),
		...this.HookSpot({ spot: 'l1', x: -33, y: -209 },
			this.HookItem({ texture: 'wheel', hookY: 103, use: {
				player: [`p:"it's a big ol' wheel"`],
				rope: [`p:"uhh... reel wope? no, that's nothing"`],
				otherTarget: [`p:"that wheely won't work"`, `p:"try again, i'm on a roll"`, `p:"feel like i'm going in circles with this idea"`],
			}, }),
		),
		...this.HookSpot({ spot: 'l2', x: -132, y: -250 },
			// empty
		),
		...this.HookSpot({ spot: 'l3', x: -259, y: -298 },
			this.HookItem({ texture: 'cowboy hat', hookY: 58, use: {
				player: [`p:"yeehaw"`, `p:"oh it doesn't fit me... yeenaw"`],
				rope: [`p:"just missing the cow"`],
			}, }),
		),

		this.mite = this.Npc({ name: 'dust mite', body: 'mite', x: 3, y: -448, roam: 50, offset: 90000, bodyCollision: { isStatic: false, isSensor: true }, use: {
			undefined: ['goto:mite run'],
			other: [`p:"it seems content to ignore that"`, `p:"got its own priorities"`, `p:"it doesn't get it"`],
		}, }),

		this.Prop({ texture: 'heist_fg', offset: 10000 }),
	]);

	this.Area('soap', [
		this.Prop({ texture: 'noItemSoap', offset: -1000000 }),
		this.Item({ label: 'soap', texture: 'soapItem', x: 54, y: -304, use: {
			undefined: ['goto:soap'],
			player: ['goto:no one item cancel'],
		} }),
		...rays(),
	]);

	this.Area('mouse town center', [
		this.Poly({ verts: [349,-265, -23,-499, -350,-301, -350,15, 350,15, 350,-266] }), // walls

		this.Prop({ texture: 'bg',                  offset: -1000000 }),
		this.Prop({ texture: 'buttons', x: 44, y: -339,        offset: -30 }),
		this.Poly({ verts: [-23,-472] }), // egg
		this.Item({ texture: 'easter egg', x: -23, y: -463,          offset: -10, use: {
			player: [`p:"it's an easter egg"`],
			matchbox: [`p:"i don't want to melt that..."`],
			otherTarget: [`p:"maybe... no, nothing"`, `p:"what if... no, that couldn't be it"`, `p:"thought it might do something special... guess not"`],
		}, }),
		this.Poly({ verts: [-24,-105, 42,-111], width: 5, }), // knife
		this.Prop({ texture: 'butter knife', x: 66, y: -94,        offset: -30 }),
		this.Poly({ verts: [-337,-45, -255,-26, -291,-5], width: 7 }), // chapstick
		this.Prop({ texture: 'chapstick', x: -284, y: -10,     offset: -10 }),
		this.Poly({ verts: [15,-390, 4,-395, 15,-398, 24,-395, 16,-390] }), // bottle cap
		this.Item({ texture: 'bottle cap', x: 15, y: -378,     offset: -10, use: {
			player: [`p:"it's a bottle cap"`, `p:"it could probably hold something"`],
			juice: [`p:"it's already in a cup"`],
		}, }),

		this.Interrupt({ passage: 'gatehouse interrupt', type: 'poly', verts: [84,-324, 141,-283, 178,-298, 236,-342, 162,-384] }),
		this.Poly({ verts: [286,-306, 221,-271, 172,-299, 237,-345, 166,-385, 98,-347, 39,-382, 111,-423] }), // gate
		this.Prop({ texture: 'gatehouse', x: 164, y: -259,        offset: -120 }),
		this.Prop({ texture: 'pushPins', x: 62, y: -420,          offset: 41 }),
		this.Poly({ verts: [258,-268, 293,-282], width: 10 }), // toothpicks
		this.Item({ texture: 'toothpicks', x: 273, y: -247,    offset: -87, use: {
			player: [`p:"it's a toothpick"`],
			matchbox: [`p:"i could burn them, but i shouldn't"`],
			foil: [`p:"hm... maybe if it were more malleable..."`],
			anvil: [`p:"maybe the smith could use it"`],
			cheese: [`p:"i'm not here to make hors d'oeuvres"`],
		}, }),
		this.Poly({ verts: [321,-245, 333,-245] }), // salt shaker
		this.Prop({ texture: 'salt shaker', x: 328, y: -232,        offset: -10 }),

		this.Block({ type: 'circle', x: -10, y: -435, radius: 2, }), // crayon SL
		this.Block({ type: 'circle', x: 311, y: -235, radius: 2, }), // crayon SR
		this.Prop({ texture: 'shelfCrayonSL', x: -9, y: -430,    offset: -4 }),
		this.Prop({ texture: 'shelfCrayonSR', x: 312, y: -230,    offset: -4 }),
		this.Prop({ texture: 'shelfBg', x: 157, y: -288,            offset: 75 }),
		this.Prop({ texture: 'pushPinsTop', x: 30, y: -498,          offset: 375 }),
		this.Prop({ texture: 'pepper shaker', x: 192, y: -456,     offset: 275 }),
		this.Hotspot({ texture: 'pill bottle', x: 100, y: -437,     offset: 275, use: {
			undefined: [`p:"it's a bottle of pills"`, `p:"the label says 'sleepmaxx 2000'"`, `p:"they're probably expired"`],
			'bottle cap': [`p:"guess it fell down here"`],
			pill: [`p:"there's more of them in there"`],
			other: [`p:"i can't reach it up there"`],
		}, }),
		this.Item({ texture: 'pill', x: 179, y: -385,     offset: 275, use: {
			player: [`p:"it's a sleeping pill"`],
			undefined: ['goto:take pill'],
			other: [`p:"i can't reach it up there"`],
			otherTarget: [`p:"i don't think it'll reach that"`],
		}, }),


		this.Poly({ verts: [-105,-368, -56,-368], width: 55 }), // can
		this.Prop({ texture: 'can back', x: -83, y: -372,           offset: -10 }),
		this.Prop({ texture: 'can front wKey', x: -81, y: -334,          offset: -25 }),
		(() => {
			// key
			const h = this.Item({ label: 'key', texture: 'blank', carrying: 'key_carrying', x: -55, y: -360,       offset: 100, use: {
				undefined: ['goto:take key'],
				player: [`p:"it's a windup key"`],
				otherTarget: [`p:"there's no keyhole for that"`],
			}, });
			h.spr.width = 40;
			h.spr.height = 20;
			return h;
		})(),

		this.Poly({ verts: [12,-175, 54,-180, 80,-198, 87,-219, 78,-239, 54,-257, 20,-263, -13,-259, -39,-246, -57,-224, -50,-196, -26,-182, 8,-174] }), // fountain
		this.Poly({ verts: [-79,-199, 111,-234], width: 15 }), // altars
		this.sfxWater = this.Audio({ sfx: 'water', x: 19, y: -227, volume: 0.5, maxDistance: 400 }),
		this.Prop({ texture: 'fountainWater', x: 15, y: -164, freq: 1/100, offset: -45 }),
		this.Item({ texture: 'fountain',   x: 15, y: -164, alpha: 0, offset: -45, use: {
			undefined: [`goto:pickup coin`],
			'bottle cap': [`goto:fill cap`],
			player: [`p:"it's a shiny coin"`],
			matchbox: [`p:"i'm not sure i need a wet match"`],
		}, }),
		this.Hotspot({ label: 'left altar', texture: 'pizzaTableSL', x: -79, y: -189,      offset: -7, use: {
			undefined: [`goto:cheese poem`],
			cheese: ['goto:place cheese'],
			'easter egg': [`p:"no... chocolate is poisonous to mice"`],
			other: [`p:"that doesn't seem to fit"`],
		}, }),
		this.Hotspot({ label: 'right altar', texture: 'pizzaTableSR', x: 110, y: -222,      offset: -7, use: {
			undefined: [`goto:star poem`],
			star: ['goto:place star'],
			other: [`p:"that doesn't seem to fit"`],
		}, }),

		this.Poly({ verts: [218,-166, 192,-184, 271,-237, 298,-218, 219,-166], width: 5 }), // matchbox
		this.Item({ texture: 'matchbox', x: 246, y: -161,         offset: -25, use: {
			player: [`p:"it's a match"`],
			matchbox: [`goto:light match`],
			toothpicks: [`p:"i think a match would work better"`],
		}, }),

		this.Block({ type: 'circle', x: -219, y: -339, radius: 2, }), // candle green
		this.Block({ type: 'circle', x: -321, y: -278, radius: 2, }), // candle blue
		this.Block({ type: 'circle', x: -245, y: -229, radius: 2, }), // candle purple
		this.Block({ type: 'circle', x: -142, y: -292, radius: 2, }), // candle red
		this.Poly({ verts: [-184,-230, -119,-272, -149,-287, -218,-249, -185,-231], width: 5 }), // juicebox
		this.Prop({ texture: 'candleColumnBlue', x: -320, y: -272,  offset: -4 }),
		this.Prop({ texture: 'candleColumnGreen', x: -218, y: -335,      offset: -4 }),
		this.Prop({ texture: 'candleColumnPurple', x: -244, y: -225,     offset: -4 }),
		this.Prop({ texture: 'candleColumnRed', x: -142, y: -287,        offset: -4 }),
		this.Poly({ verts: [-212,-308, -260,-313, -292,-287], width: 14 }), // foil
		this.Poly({ verts: [-307,-365, -263,-316] }), // extra foil wall
		this.Item({ texture: 'foil', x: -253, y: -274,  offset: -25, use: {
			player: [`p:"it's some tin foil"`],
			toothpicks: [`p:"hm... maybe if it were more malleable..."`],
			matchbox: [`p:"it's not hot enough to do anything"`],
		}, }),
		this.Prop({ texture: 'juicebox', x: -168, y: -225,         offset: -47 }),
		this.Prop({ texture: 'juiceboxL', x: -168, y: -225,         offset: -27 }),
		this.Item({ texture: 'juice', x: -152, y: -265,         offset: -5, use: {
			undefined: ['goto:take juice'],
			player: [`p:*sluurrrp*`, `p:"tastes pretty good actually"`],
			'bottle cap': [`p:"it's already in a cup"`],
			matchbox: [`p:"seems better cold"`],
		}, }),
		this.Prop({ texture: 'candle foil top', x: -227, y: -300,   offset: 300 }),

		this.cartPoly = this.Poly({ verts: [-142,-11, -100,-40, -191,-71, -245,-110, -209,-123, -252,-149, -336,-88] }), // cart
		this.Prop({ texture: 'cheeseCart', x: -235, y: 0,  offset: -115 }),
		this.Prop({ texture: 'horseNoKey', x: -128, y: 0,   offset: -35 }),
		(() => {
			// horse
			const h = this.Hotspot({ label: 'horse', texture: 'blank', x: -155, y: -30,   offset: 0, use: {
				undefined: [`p:"it's a horse"`, `"..."`, `p:"must be tired"`, `"..."`],
				key: ['goto:windup key'],
				toothpicks: [`p:"that seems mean..."`],
				spoon: [`p:"that seems mean..."`],
				fork: [`p:"that seems mean..."`],
				'cool sword': [`p:"that seems mean..."`],
				anvil: [`p:"that seems mean..."`],
				matchbox: [`p:"that seems mean..."`],
				juice: [`p:"its owner might not like that"`],
				'easter egg': [`p:"its owner might not like that"`],
			}, });
			h.spr.width = 130;
			h.spr.height = 100;
			return h;
		})(),

		this.polyWax = this.Poly({ verts: [-180,-336, -176,-327, -110,-292, -119,-297, -94,-316, -150,-353, -180,-336], width: 12 }), // candles
		this.Hotspot({ texture: 'birthday candles', x: -132, y: -288,        offset: -33, use: {
			undefined: [`p:"happy birthday!"`, `p:"that's a lot of candles..."`],
			'cookie cutter': [`p:"maybe if they were melted..."`],
			matchbox: [`goto:melt wax`],
			'easter egg': [`p:"they have enough wax already"`],
		}, }),


		// bottom right
		this.Prop({ texture: 'cutter snowman 1', x: 274, y: -102, alpha: 0, offset: 202 }),
		this.Prop({ texture: 'cutter star 1',    x: 274, y: -101, alpha: 1, offset: 201 }),
		this.Prop({ texture: 'cutter tree 1',    x: 279, y: -107, alpha: 0, offset: 207 }),
		// left
		this.polyCutter = this.Poly({ verts: [-344,-211, -320,-215, -311,-242, -296,-259, -309,-266, -348,-237] }), // snowman
		this.Prop({ texture: 'cutter snowman 2', x: -298, y: -129, alpha: 1, offset: -125 }),
		this.Prop({ texture: 'cutter star 2',    x: -286, y: -126, alpha: 0, offset: -115 }),
		this.Prop({ texture: 'cutter tree 2',    x: -293, y: -129, alpha: 0, offset: -125 }),
		// top right
		this.Prop({ texture: 'cutter snowman 3', x: 289, y: -324, alpha: 0, offset: 300 }),
		this.Prop({ texture: 'cutter star 3',    x: 281, y: -300, alpha: 0, offset: 314 }),
		this.Prop({ texture: 'cutter tree 3',    x: 284, y: -303, alpha: 1, offset: 300 }),
		(() => {
			// bottom right
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: 311, y: -145, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
				'wax wad': [`p:"it'd need to be flat for that"`],
			}, });
			h.pos = 1;
			h.cookie = 'star';
			h.carrying = 'cutter star carrying';
			h.spr.width = 100;
			h.spr.height = 100;
			return h;
		})(),
		(() => {
			// left
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: -314, y: -214, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
				'wax wad': ['goto:shape wax'],
			}, });
			h.pos = 2;
			h.cookie = 'snowman';
			h.carrying = 'cutter snowman carrying';
			h.spr.width = 100;
			h.spr.height = 100;
			return h;
		})(),
		(() => {
			// top right
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: 310, y: -346, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
				'wax wad': [`p:"it'd need to be flat for that"`],
				other: [`p:"i can't do much with it up there"`],
			}, });
			h.pos = 3;
			h.cookie = 'tree';
			h.carrying = 'cutter tree carrying';
			h.spr.width = 100;
			h.spr.height = 120;
			return h;
		})(),

		// hacky fix for getting stuck behind cutter during swap
		this.Updater(() => {
			if (this.scene.player.x < -299 && this.scene.player.y < -227) {
				this.scene.player.x = -258;
				this.scene.player.y = -195;
			}
		}),

		this.Poly({ verts: [348,-187, 37,7] }), // stove ledge
		this.Prop({ texture: 'stoveFloor', x: 175, y: 0, offset: 0 }),
		this.Hotspot({ label: 'hob', texture: 'stoveHob', x: 310, y: 0,   offset: 0, use: {
			undefined: [`p:"it's a gas hob"`],
			matchbox: [`goto:light stove`],
		}, }),
		this.Prop({ texture: 'spoonForkStoveProng', x: 218, y: 0,      offset: 1 }),
		this.Prop({ texture: 'anvilStoveProng', x: 306, y: -45,          offset: 47 }),
		(() => {
			const h = this.Item({ label: 'anvil', texture: 'blank', carrying: 'anvil_carrying', x: 295, y: -52, offset: 100, use: {
				player: [`p:"it's a hammer"`],
				other: [`p:"better leave it to the smith"`],
				otherTarget: [`p:"why would i hit that?"`],
			}, });
			h.spr.width = 50;
			h.spr.height = 30;
			return h;
		})(),
		// cutlery
		(() => {
			const h = this.Item({ label: 'fork', texture: 'blank', carrying: 'fork_carrying', x: 197, y: -64, offset: 1000, use: {
				player: [`p:"it's a fork"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 30;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'spoon', texture: 'blank', carrying: 'spoon_carrying', x: 217, y: -61, offset: 1000, use: {
				player: [`p:"it's a spoon"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 30;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'spoon', texture: 'blank', carrying: 'spoon_carrying', x: 241, y: -58, offset: 1000, use: {
				player: [`p:"it's a spoon"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 30;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'spoon', texture: 'blank', carrying: 'spoon_carrying', x: 192, y: -14, offset: 1000, use: {
				player: [`p:"it's a spoon"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 60;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'fork', texture: 'blank', carrying: 'fork_carrying', x: 218, y: -13, offset: 1000, use: {
				player: [`p:"it's a fork"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 60;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'fork', texture: 'blank', carrying: 'fork_carrying', x: 236, y: -8, offset: 1000, use: {
				player: [`p:"it's a fork"`],
			}, });
			h.spr.width = 30;
			h.spr.height = 60;
			return h;
		})(),

		this.Npc({ name: 'grumpy guard', body: 'mouse_guard_tall', tint: 0x2063ef, x: 71, y: -302, flip: true, use: {
			undefined: [`"hrhgh.. hate this..."`, `"hrg.. not paid enough..."`, `"hhh..."`],
			fountain: ['goto:give coin'],
			pill: [`p:"i don't think it's close enough for that"`],
			toothpicks: [`"hrghgh.. dangerous.. confiscated..."`],
			foil: [`"hrghgh.. dangerous.. confiscated..."`],
			anvil: [`"hhrf... put back..."`],
			spoon: [`"hhrf... put back.. now..."`],
			fork: [`"hhrf... put back.. now..."`],
			cheese: [`"huhh...? no.. contraband..."`],
			juice: [`"hehg.. not on job..."`],
			'cookie cutter': [`"herh... don't give mouse.. cookie..."`],
			ring: [`"hrhr.. no.. fraternization..."`],
			'cool sword': [`"huhh...? cool..."`],
			other: [`"hgreh.. leave..."`, `"hufh.. back..."`],
		}, }),
		this.Npc({ name: 'sleepy sentry', body: 'mouse_guard_short', tint: 0xe6d77a, x: 170, y: -259, flip: true, use: {
			undefined: [`"guh.. tired..."`, `"ghuhg... need.. nap..."`, `"geugh... yawn..."`],
			fountain: [`"grhgerh... bribes.. illegal..."`],
			toothpicks: [`"grgrg.. dangerous.. confiscated"`],
			foil: [`"grgrg.. dangerous.. confiscated"`],
			anvil: [`"grgh... put back..."`],
			spoon: [`"grgh... put back.. now..."`],
			fork: [`"grgh... put back.. now..."`],
			cheese: [`"guhh...? forbidden..."`],
			juice: [`"ghghh... not.. before bed..."`],
			'cookie cutter': [`"grr... don't give mouse.. cookie..."`],
			ring: [`"grgr.. no.. fraternization..."`],
			pill: ['goto:drop pill'],
			'cool sword': [`"guhh...? cool..."`],
		}, }),
		this.Npc({ name: 'stuffy shopkeep', body: 'mouse_basic', tint: 0xb68ab8, x: -78, y: -360, offset: -5, use: {
			undefined: [`"kaffkafkf..."`, `"kkff.. t-too hot..."`, `"khh.. th-thirsty..."`],
			'bottle cap': [`"kfhh.. no.. dirty..."`],
			cheese: [`"krekg.. contraband..."`],
			'wax wad': [`"kfgkg... sticky.. tastes bad..."`],
			key: [`"key.. found.. take..."`],
			ring: [`"keh.. wrong.. thirst..."`],
			juice: ['goto:give juice'],
			'cookie cutter': [`"kack... don't give mouse.. cookie..."`],
			fountain: [`"kafkf.. nothing left.. sale..."`],
		}, }),
		this.Npc({ name: 'jumpy juicemonger', body: 'mouse_basic', tint: 0x880DB4, x: -207, y: -278, use: {
			undefined: [`"wehh.. late late late..."`, `"waahnhn..."`, `"wuhh.. waaannnt ring back..."`],
			ring: ['goto:give ring'],
			fountain: [`"wahh.. for you.. free..."`],
			cheese: [`"whaa..! forbidden...!"`],
			'cookie cutter': [`"wagh... don't give mouse.. cookie..."`],
		}, }),
		this.Npc({ name: 'puny pyro', body: 'mouse_basic', tint: 0x47654c, x: 268, y: -165, flip: true, use: {
			undefined: [`"iia... matches.. free..."`, `"iii'm liiiittle.. can't catch..."`, `"ihihihi..."`],
			matchbox: [`"ihihi.. do iiit..."`],
			toothpicks: [`"ih.. prefer.. matches..."`],
			other: [`"iit's.. cold..."`, `"iiiff.. i could..? burn it...?"`],
			ring: [`"ih.. prefer.. siiingle..."`],
			anvil: [`"ihi.. won't let.. play with forge..."`],
			cheese: [`"ih.. couldn't... forbidden..."`],
			star: [`"ihihi.. melted.. good..."`],
			'cookie cutter': [`"ihih... don't give mouse.. cookie..."`],
			'cool sword': [`"ihh... hate cool things..."`],
		}, }),
		this.Npc({ name: 'stubborn smith', body: 'mouse_smith', tint: 0x3CECA1, x: 238, y: -62, flip: true, offset: 62, use: {
			undefined: [`"mhhe.. forge.. dead..."`, `"mm.. ring.. late..."`, `"mhm..."`],
			foil: [`"mehh... not.. without forge..."`],
			toothpicks: [`"mehh... not.. without forge..."`],
			fork: [`"mehh... not.. without forge..."`],
			spoon: [`"mehh... not.. without forge..."`],
			'hot sword': [`"mm... molten.. careful..."`],
			'cool sword': [`"mm.. my work... mhmmmm.."`],
			fountain: [`"meh.. weak..."`],
			anvil: [`"mm.. stregth.. share..."`],
			'cookie cutter': [`"mrrhh... don't give mouse.. cookie..."`],
			ring: [`"mmm... my bad..."`],
		}, }),

		this.Npc({ name: 'cheesy coachmouse', body: 'mouse_nervous', tint: 0xB5320C, x: -192, y: -172, bodyCollision: { isStatic: true }, use: {
			undefined: [`"arhh.. horse.."`, `"ahhh.. won't go..."`, `"arhghg..."`],
			'wind-up key': [`"ah.. familiar...?"`, `"ah.. think..."`],
			fountain: [`"ah.. only work.. for crown..."`],
			ring: [`"ahg.. for horse...?"`],
			'cookie cutter': [`"arhgh... don't give mouse.. cookie..."`],
		}, }),
		this.Npc({ name: 'haughty hooligan', body: 'mouse_sitting', tint: 0x88898c, offset: 1000, x: 218, y: -357, shadow: false, flip: true, use: {
			undefined: [`"hehehe..."`, `"heh.. even guards.. below me..."`, `"hm... but.. have weapons..."`],
			'cool sword': ['goto:give sword'],
			other: [`"hmm.. don't want that..."`, `"hm.. not a weapon..."`],
			anvil: [`"hm... sword would be cooler..."`],
			fork: [`"hm... sword would be cooler..."`],
			spoon: [`"hm... sword would be cooler..."`],
			foil: [`"hm... not ready..."`],
			toothpicks: [`"hm... no.. weak..."`],
			'cookie cutter': [`"hhh... don't give mouse.. cookie..."`],
			ring: [`"heh.. not cool..."`],
		}, }),

		(() => {
			const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: 130, y: -310, offset: 1000, use: {
				undefined: [`goto:goto sandwich`],
			}, });
			h.spr.width = 80;
			h.spr.height = 90;
			return h;
		})(),
	]);

	this.Area('sandwich', [
		// sandwich
		this.Poly({ verts: [26,-326, 109,-283, 166,-271, 224,-285, 261,-314, 259,-339, 214,-381, 135,-431, 54,-465, 6,-458, -30,-445, -56,-422, -56,-399, -33,-368, 25,-327] }),
		this.Prop({ texture: 'sandwichBg', offset: -1000000 }),
		this.Item({ label: 'half-eaten tuna fish sandwich', texture: 'sandwich', x: +344-142-218/2, y: -307, offset: -100000, use: {
			undefined: ['goto:sandwich'],
			player: ['goto:no one item cancel'],
		} }),
		...rays(),
	]);



	this.shock = (target, duration = 500) => {
		const d = duration;
		const p = d * 0.02;
		const t1 = this.tween(target.spr, 'y', 0, d, -20, t => 1-Math.abs(Math.cos(t*p))*(1-t));
		const t2 = this.tween(target.spr, 'angle', 0, d, -10, t => 1-Math.cos(t*p)*(1-t));
		return [t1, t2];
	};


	this.gotoItemRoom = async (pos, area) => {
		this.scrim(1, 400);
		this.scene.player.walkTo(pos.x, pos.y);
		await this.delay(500);
		this.scene.goto({ area, x: -277 - 100, y: -108 + 100 });
		this.scene.player.floor = 'Stone';
		this.scrim(0, 1500);
		await this.scene.player.walkTo(-277, -108);
		this.goto('close');
	};

	this.itemRoomPickup = async (next) => {
		this.camPoint = this.scene.player.transform;
		await this.scene.player.walkTo(-40, -260);
		this.scene.player.flipped = false;
		await this.delay(500);
		this.scene.player.expression = 'up';
		const item = this.scene.currentArea.find(i => i.btn);
		this.scene.pickupItem(item);
		item.display.container.visible = false;
		item.btn.enabled = false;
		this.goto(next);
	};

	this.gotoNoOne = async (getItem) => {
		await this.delay(400);
		this.tween(this.scene.find('godRayL').display.container, 'alpha', 0, 50);
		await this.delay(300);
		this.tween(this.scene.find('godRayC').display.container, 'alpha', 0, 50);
		await this.delay(200);
		this.tween(this.scene.find('godRayR').display.container, 'alpha', 0, 50);
		await this.delay(100);
		this.scene.currentArea.filter(i => i.texture && !i.texture.includes('Ray')).forEach(i => {
			this.tween(i.display.container, 'alpha', 0, 2000);
		});
		await this.delay(1500);
		this.scene.player.expression = '';
		await this.delay(1500);
		this.sfx('chunk', { volume: 0.7, rate: 1.0 }),
		this.tween(this.scene.find('godRayL').spr, 'alpha', 0, 100);
		this.scene.player.flipped = true;
		await this.delay(1000);
		this.tween(this.scene.find('godRayC').spr, 'alpha', 0, 100);
		this.sfx('chunk', { volume: 0.85, rate: 0.95 }),
		await this.delay(1000);
		this.tween(this.scene.find('godRayR').spr, 'alpha', 0, 100);
		this.sfx('chunk', { volume: 1.0, rate: 0.9 }),
		await this.delay(1200);
		this.scene.player.flipped = false;
		await this.delay(1200);
		this.scene.player.flipped = true;
		await this.delay(1000);

		this.scene.player.walkTo(-204, -96);
		await this.delay(1500);
		this.scene.goto({ area: 'no one', x: this.scene.player.x, y: this.scene.player.y });
		this.scene.find('no one Head').display.container.alpha = 0;
		this.scene.find('no one UL').display.container.alpha = 0;
		this.scene.find('no one LL').display.container.alpha = 0;
		this.scene.find('no one LR').display.container.alpha = 0;
		this.tween(this.scene.find('no one LL').display.container, 'alpha', 1, 1000);
		await this.delay(1000);
		this.scene.player.flipped = false;
		this.tween(this.scene.find('no one UL').display.container, 'alpha', 1, 800);
		this.tween(this.scene.find('no one LR').display.container, 'alpha', 1, 1200);
		await this.delay(1000);
		this.tween(this.scene.find('no one Head').display.container, 'alpha', 1, 2000);
		await this.delay(1000);
		this.goto('close');
	};

	this.leaveNoOne = async (area) => {
		this.scene.player.expression = 'up';
		const d = 4000;
		const p = 30;
		this.tween(this.scene.player.spr, 'angle', 0, d, 50, t => 1-Math.sin(t*p)*(t));
		this.tween(this.scene.player, 'flipped', 0, d, 50, t => (1-Math.sin(t*p)) < 0.5);
		this.tween(this.scene.player.spr, 'y', 0, d, -200, t => 1-this.ease.cubicIn(t)+Math.sin(t*10)*-0.1);
		this.tween(this.scene.player.spr, 'x', 0, d, -50, (t) => 1-(this.ease.sineInOut(t*2) + this.ease.sineInOut(t*4))*t); 
		this.tween(this.scene.player.spr, 'alpha', 1, d, 0, (t) => 1-this.ease.cubicIn(t));
		this.scene.player.display.container.offset = 100000;

		await this.delay(d);
		this.scene.player.flipped = false;
		this.scene.player.display.container.visible = false;
		this.scene.player.expression = '';
		
		this.tween(this.scene.find('no one LR').display.container, 'alpha', 0, 1000);
		await this.delay(1000);
		this.tween(this.scene.find('no one UL').display.container, 'alpha', 0, 1000);
		await this.delay(800);
		this.tween(this.scene.find('no one LL').display.container, 'alpha', 0, 1000);
		await this.delay(800);
		this.tween(this.scene.find('no one Head').display.container, 'alpha', 0, 1000);
		await this.delay(1500);
		this.scrim(1, 0);
		this.scene.goto(area);
		this.scene.player.display.container.visible = true;
		this.scene.player.display.container.offset = 0;
		this.camPoint = undefined;
		this.scrim(0, 2000);
		await this.delay(2000);
		this.goto('close');
	};


	// start
	this.started=true;
	this.scene.goto({ area: 'menu' });
>>
<<endif>>
<<do
	this.scene.player.walkToMouseO = this.scene.player.walkToMouse;
	this.scene.player.walkToMouse = () => {};
	this.scene.player.display.container.visible = false;
	setTimeout(() => {
		this.scrim(0, 3000);
		this.goto('close');
	}, 1000);
>>

::start game
<<do
	(async () => {
		const guy = this.Prop({ texture: 'guy_big', tint: 0xa49484, alpha: 0, x: -69, y: -75, offset: 10000 });
		this.add(
			guy,
		);
		this.tween(guy.spr, 'alpha', 1, 2000);
		await this.delay(1000);
		this.goto('start game1');
	})();
>>

::start game1
<<do this.gameObject = this.scene.find('playerText')>>
"the house next door..."
>
"hmm..."
>
"seems like no one lives here."
>
"maybe i can just go in and explore..."
>
"..."
>
"maybe i should knock first?"
>
"just in case."
>
"..."
>
"..."
>
"ok... here goes..."
>
<<do
	(async () => {
		const doorStatic = this.scene.find('doorClosed');
		const doorAnim = this.scene.find('doorOpen');
		doorStatic.set('doorKnock1');
		await this.delay(100);
		doorStatic.set('doorKnock2');
		await this.delay(100);
		doorStatic.set('doorClosed');
		this.sfx('chunk', { rate: 2 });
		const t1 = this.Text('*TOC*', { x: 55, y: -363, fontSize: 48 });
		t1.text.anchor.y = 0.4;
		t1.text.anchor.x = 0.4;
		this.add(t1);
		this.tween(t1.display.container, 'alpha', 0, 2000);
		this.tween(t1.display.container, 'angle', 0, 2000, 15, t => 1-Math.sin(t*60)*this.ease.circOut(t));
		this.tween(t1.transform, 'y', t1.transform.y+20, 2000, undefined, this.ease.circOut);
		await this.delay(500);
		doorStatic.set('doorKnock1');
		await this.delay(100);
		doorStatic.set('doorKnock2');
		await this.delay(100);
		doorStatic.set('doorClosed');
		this.sfx('chunk', { rate: 1.9 });
		const t2 = this.Text('*TOC*', { x: 70, y: -330, fontSize: 48 });
		t2.text.anchor.y = 0.4;
		t2.text.anchor.x = 0.4;
		this.add(t2);
		this.tween(t2.display.container, 'alpha', 0, 2000);
		this.tween(t2.display.container, 'angle', 0, 2000, 15, t => 1-Math.sin(t*60)*this.ease.circOut(t));
		this.tween(t2.transform, 'y', t2.transform.y+20, 2000, undefined, this.ease.circOut);
		await this.delay(3000);
		doorStatic.display.container.visible = false;
		doorAnim.spr.alpha = 1;
		doorAnim.animator.setAnimation('doorOpen.1', { 12: 5 });
		await this.delay(100);
		this.shock(this.scene.find('guy_big'), 800);
		await this.delay(2600);
		doorAnim.animator.active = false;
		const head = this.Prop({ texture: 'noone_head', alpha: 0, x: 25, y: -212, offset: -20000, });
		this.add(head);
		this.tween(head.spr, 'alpha', 1, 2000, 0, this.ease.cubicOut);
		this.tween(head.spr, 'x', 0, 2000, -20, this.ease.cubicOut);
		this.tween(head.spr, 'y', 0, 2000, -10, this.ease.cubicOut);
		await this.delay(2000);
		this.goto('start game2');
	})();
>>


::start game2
<<do this.gameObject = this.scene.find('nooneText')>>
"hello, human child."
>
<<do this.gameObject = this.scene.find('playerText')>>
"who are you?"
>
<<do this.gameObject = this.scene.find('nooneText')>>
"no one."
>
<<do this.gameObject = this.scene.find('playerText')>>
"what?"
>
"but i'm talking to you."
>
<<do this.gameObject = this.scene.find('nooneText')>>
"..."
>
<<do this.gameObject = this.scene.find('playerText')>>
"..."
>
"um, i live next door, and--"
>
<<do
	(async () => {
		const guy = this.scene.find('guy_big');
		this.tween(guy.display.container.scale, 'x', 0.25, 1000, undefined, this.ease.cubicInOut);
		this.tween(guy.display.container.scale, 'y', 0.25, 1000, undefined, this.ease.cubicInOut);
		for(let i = 0; i < 10; ++i) {
			setTimeout(() => {
				const g = this.Prop({ texture: 'guy_big', tint: 0xa49484, alpha: 0.5, x: -69, y: -75, offset: 10000 });
				g.display.container.scale.x = guy.display.container.scale.x;
				g.display.container.scale.y = guy.display.container.scale.y;
				this.add(
					g,
				);
				this.tween(g.display.container, 'alpha', 0, 200, undefined, this.ease.cubicIn);
			}, i * 100);
		}
		await this.delay(900);
		this.tween(guy.display.container, 'alpha', 0, 100, undefined, this.ease.cubicIn);
		this.scene.player.display.container.visible = true;
		this.scene.player.display.container.alpha = 0;
		this.tween(this.scene.player.display.container, 'alpha', 1, 100, undefined, this.ease.cubicOut);
		this.scene.player.x = -69;
		this.scene.player.y = -76;
		this.scene.player.flipped = false;
		await this.delay(100);
		await this.delay(1500);
		this.goto('start game3');
	})();
>>

::start game3
<<do this.gameObject = this.scene.find('playerText')>>
<<do this.shock(this.scene.player, 500);>>
"h-hey!"
>
"you shrunk me!!"
>
<<do this.gameObject = this.scene.find('nooneText')>>
"..."
>
<<do this.gameObject = this.scene.find('playerText')>>
"make me big again!"
>
<<do this.gameObject = this.scene.find('nooneText')>>
"..."
>
"perhaps later."
>
"you must be small to complete your task."
>
<<do this.gameObject = this.scene.find('playerText')>>
"what task??"
>
<<do this.gameObject = this.scene.find('nooneText')>>
"you must fetch something."
>
"an odd-looking tomato..."
>
"locked in a temple for many years."
>
<<do this.gameObject = this.scene.find('playerText')>>
"um, what temple?"
>
<<do this.gameObject = this.scene.find('nooneText')>>
"the gnomes in the garden will know more."
>
"go now, you haven't much time..."
>
<<do
	(async () => {
		this.scrim(1, 2000);
		await this.delay(2000);
		this.scene.goto({ area: 'gnome puzzle', x: -106, y: -79 });
		this.goto('close');
		this.scene.player.walkToMouse = this.scene.player.walkToMouseO;
		this.scrim(0, 2000);
		await this.delay(2000);
	})();
>>



::close
this should never render

::choiceDefault
continue

::generic item
<<do this.gameObject.pickup(); this.goto('close')>>

::generic use
<<do this.gameObject = this.scene.player; this.scene.loseItem();>>
<<print this.shuffle([
	`"i don't think that will work"`,
	`"i don't know about that..."`,
	`"not sure what that would do..."`,
])[0]>>
[[>close]]

::no one item cancel
"i probably shouldn't hold on to that..."
[[>close]]


::request
//eh





// .d8888b. 88d888b. .d8888b. 88d8b.d8b. .d8888b.
// 88'  `88 88'  `88 88'  `88 88'`88'`88 88ooood8
// 88.  .88 88    88 88.  .88 88  88  88 88.  ...
// `8888P88 dP    dP `88888P' dP  dP  dP `88888P'
//      .88
//  d8888P
::flamingo
<<if this.scene.carrying && this.scene.carrying.name.includes('rock')>>
<<if Math.random() > 0.5>>
<<do this.gameObject = this.scene.find('fiery gnome')>>
"put it where i say or it'll never open!"
<<else>>
<<do this.gameObject = this.scene.find('numb gnome')>>
"it'd open if you put it where i said... oh well"
<<endif>>
<<else>>
<<if Math.random() > 0.5>>
<<do this.gameObject = this.scene.find('fiery gnome')>>
"that'll never open it!"
<<else>>
<<do this.gameObject = this.scene.find('numb gnome')>>
"you could try... but it won't work"
<<endif>>
<<endif>>
<<do this.scene.loseItem()>>
[[>close]]

::cut flower
<<do
	this.sfx('rustle');
	this.scene.loseItem(true);
	this.destroy(this.gameObject);
	this.destroy(this.glassPoly);
	this.gameObject = this.scene.player;

	const cutFlower = this.Item({ label: 'cut flower', texture: 'flower_head', x: -55, y: -321, offset: 0, use: {
		player: [`p:"it's a flower"`],
		'safety pin': [`p:"it's too big for that"`],
		thimble: [`p:"i think it's a daisy, not a thimble flower"`],
		'little rock': [`p:"i don't want to crush it"`],
		'medium rock': [`p:"i don't want to crush it"`],
		'big rock': [`p:"i don't want to crush it"`],
	}, });
	cutFlower.btn.enabled = false;
	this.scene.screenFilter.flash([128,128,128], 200, this.ease.cubicOut);
	this.tween(cutFlower.transform, 'y', -266, 2000, -321, this.ease.backIn);
	this.tween(cutFlower.transform, 'x', -25, 2000, -55, (t) => this.ease.sineInOut(t) + this.ease.sineInOut(t*4));
	this.tween(cutFlower.spr, 'angle', 0, 2000, 30, (t) => this.ease.sineInOut(t) + this.ease.sineInOut(t*4));
	this.add(
		this.Prop({ texture: 'bg_gnome_puzzle_flower_gone', x: -58, y: -266, offset: -10 }),
		cutFlower,
	);
	setTimeout(() => {
		cutFlower.btn.enabled = true;
	}, 2000);
	this.goto('close');
>>

::move leaf
<<do
	this.sfx('rustle', { rate: 0.8 });
	this.gameObject.btn.enabled = false;
	this.add(
		this.Item({ texture: 'medium rock', x: 132, y: -185, use: {
			player: [`"it's a rock"`],
			'cut flower': [`p:"i don't want to crush it"`],
			'little rock': [`p:"wouldn't want to get between these two"`],
			'big rock': [`p:"wouldn't want to get between these two"`],
			glass: [`p:"not a house, but i still shouldn't throw it"`],
			die: [`p:"rock and roll!"`],
		}, }),
	);
	this.tween(this.gameObject.transform, 'x', this.gameObject.transform.x + 50, 800, undefined, this.ease.cubicInOut);
	this.gameObject = this.scene.player;
	setTimeout(() => {
		this.goto('move leaf1');
	}, 600);
>>

::move leaf1
"oh! a rock!"
[[>close]]

::take big rock
<<if this.scene.find('worm').display.container.alpha <= 0>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('fiery gnome')>>
"hands off my rock!!"
[[>close]]
<<endif>>

::take little rock
<<if this.scene.find('numb gnome').expression === 'hatless'>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('numb gnome')>>
"hey! that's my rock ya jerk."
[[>close]]
<<endif>>

::remove-hat
"hmm, that flower is cute..."
>
<<do
	this.scene.loseItem(true);
	this.gameObject.expression = 'hatless';
	const spr = new this.PIXI.Sprite(this.tex('flower_head'));
	spr.anchor.x = spr.anchor.y = 0.5;
	spr.scale.x = spr.scale.y = 0.5;
	spr.scale.x *= -1;
	spr.y -= 74;
	spr.x = 5;
	const numbgnome = this.scene.find('numb gnome');
	numbgnome.spr.addChild(spr);
	this.shock(numbgnome, 300);
	numbgnome.btn.use.undefined = [`"thanks for the cute flower..."`, `"he won't put his rock on that tile..."`, `"my solution is right but whatever..."`];
	numbgnome.btn.resetCycles();
	this.sfx('rustle', { rate: 1.1 });

	setTimeout(() => {
		this.sfx('rustle', { rate: 0.8 });
		this.goto('close');
		this.add(
			this.Item({ texture: 'hat', x: 128, y: -83, tint: 0x6f79cd, use: {
				player: ['p:"it is a gnome hat"'],
				'safety pin': [`p:"it doesn't need a pin to stay on"`],
				thimble: [`p:"fashion is so complicated"`],
			}, }),
		);
	}, 1000);
>>

::worm hat
<<do
	this.scene.loseItem(true);
>>
"for me? thanks buddy"
>
<<do
	setTimeout(() => {
		this.sfx('rustle');
		this.add(
			this.Prop({ texture: 'hat', x: -250, y: -180, tint: 0x6f79cd, offset: 50, }),
		);
		setTimeout(() => {
			this.goto('worm hat1');
		}, 1000);
	}, 500);
>>

::worm hat1
"now i can go out and look cute"
>
<<do
	const hat = this.scene.find('hat');
	const worm = this.scene.find('worm');
	this.tween(hat.display.container, 'alpha', 0, 1000);
	this.tween(worm.display.container, 'alpha', 0, 1000);
	worm.btn.enabled = false;
	const fierygnome = this.scene.find('fiery gnome');
	fierygnome.btn.use.undefined = [`"i know where the rocks go!"`,`"don't listen to the other guy."`, `"so glad that worm is gone..."`];
	fierygnome.btn.resetCycles();
	this.sfx('rustle', { rate: 0.5 });
	this.voice = 'None';
>>
"peace"
[[>close]]

::place big rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('big rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::place medium rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('medium rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::place little rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('little rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::rock occupied
<<do this.scene.loseItem(); >>
<<do this.gameObject = this.scene.player>>
<<if this.spot.rock === this.rock>>
"i already put it there"
<<else>>
"there's already a rock there"
<<endif>>
[[>close]]

::place rock
<<do
	this.sfx('stepStone');
	const oldSpot = this.scene.findAll('spot').find(i => i.rock === this.rock);
	if (oldSpot) oldSpot.rock = undefined;
	this.spot.rock = this.rock;
	this.scene.loseItem();
	this.rock.transform.x = this.spot.transform.x;
	this.rock.transform.y = this.spot.transform.y - 20;
	setTimeout(() => {
		this.goto('place rock1');
	}, 500);
>>

::place rock1
<<do this.gameObject = this.scene.player>>
"how about this?"
>
<<do this.gameObject = this.scene.find('fiery gnome'); this.shock(this.gameObject, 250);>>
<<if ['12','23','31'].includes(this.spot.spot)>>
"<<print this.shuffle(['yes!', 'absolutely!'])[0]>>"
<<else>>
"<<print this.shuffle(['no way!', 'nuh uh!'])[0]>>"
<<endif>>
>
<<do this.gameObject = this.scene.find('numb gnome'); this.shock(this.gameObject, 250);>>
<<if ['11','22','33'].includes(this.spot.spot)>>
"<<print this.shuffle(['right!', 'correct!'])[0]>>"
<<else>>
"<<print this.shuffle(['wrong!', 'incorrect!'])[0]>>"
<<endif>>
<<if this.scene.findAll('spot').filter(i => i.rock).map(i => i.spot).sort().join(',') === '13,21,32'>>
[[>rock solved]]
<<else>>
[[>close]]
<<endif>>

::rock solved
<<do
	this.scene.findAll('spot').forEach(i => { i.btn.enabled = false; });
	this.scene.camera.shake = 2;
	this.camPoint = { x: this.size.x, y: -this.size.y };
	this.scene.screenFilter.flash([255,255,255], 200, this.ease.cubicOut);
	this.tween(this.scene.camera, 'shake', 0, 1500, 2, this.ease.cubicIn);
	this.tween(this.scene.find('bg_gnome_puzzle_closed_BACK').display.container, 'alpha', 0, 1000);

	this.destroy(this.flamingoMouthPoly);
	this.scene.drop(
		this.Poly({ verts: [18,-292, 13,-263, 35,-234, 60,-263, 166,-324, 187,-237, 216,-166, 212,-247] }),
	);

	const fierygnome = this.scene.find('fiery gnome');
	fierygnome.btn.use.undefined = [`"i can't believe i was wrong!!"`,`"don't tell anyone i was wrong!"`];
	fierygnome.btn.resetCycles();
	const numbgnome = this.scene.find('numb gnome');
	numbgnome.btn.use.undefined = [`"i guess my solution didn't work..."`,`"that's fine i guess..."`];
	numbgnome.btn.resetCycles();

	setTimeout(() => {
		this.camPoint = undefined;
		this.goto('rock solved1');
	}, 2000);
	setTimeout(() => {
		this.shock(fierygnome, 1500);
	}, 60);
	setTimeout(() => {
		this.shock(numbgnome, 1500);
	}, 120);
>>
::rock solved1
<<do
	this.destroy(this.scene.find('entrance'));
	const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: 134, y: -240, use: {
		undefined: [`goto:goto tomato`],
	}, });
	h.spr.width = 100;
	h.spr.height = 100;
	this.add(h);
>>
<<do this.gameObject = this.scene.find('fiery gnome')>>
"you opened the temple..."
>
<<do this.gameObject = this.scene.find('numb gnome')>>
"wow..."
[[>close]]

::goto tomato
<<do this.gotoItemRoom({ x: 125, y: -240 }, 'tomato');>>

::moon-dried tomato
<<do this.itemRoomPickup('moon-dried tomato1')>>

::moon-dried tomato1
you got the moon-dried tomato.
>
<<do this.gotoNoOne();>>

::give tomato
<<do this.scene.loseItem();>>
<<do this.gameObject = this.scene.player>>
"i got this..."
>
<<do this.gameObject = this.noone>>
"ah yes, the moon-dried tomato..."
>
"a face only a mother could love."
>
<<do this.gameObject = this.scene.player>>
"what are you gonna do with it?"
>
<<do this.gameObject = this.noone>>
"that's no one's business."
>
<<do this.gameObject = this.scene.player>>
"..."
>
<<do this.gameObject = this.noone>>
"..."
>
<<do this.gameObject = this.scene.player>>
"can i go now?"
>
<<do this.gameObject = this.noone>>
"no. i need another object."
>
"i need a bar of soap."
>
"the dust bunnies are hoarding them all..."
>
"a veritable arsenal."
>
"you can find them between the floorboards."
>
"watch out for outlaws."
>
<<do
	this.leaveNoOne({ area: 'dustbun heist', x: 50, y: -100 })
	this.scene.player.floor = 'Wood';
>>



//       dP                     dP   dP
//       88                     88   88
// .d888b88 dP    dP .d8888b. d8888P 88d888b. dP    dP 88d888b.
// 88'  `88 88    88 Y8ooooo.   88   88'  `88 88    88 88'  `88
// 88.  .88 88.  .88       88   88   88.  .88 88.  .88 88    88
// `88888P8 `88888P' `88888P'   dP   88Y8888' `88888P' dP    dP
::place on hook
<<do
	const item = this.scene.carrying;
	const spot = this.gameObject;
	item.hookspot.btn.enabled = true;
	item.hookspot.item = undefined;
	item.transform.x = spot.transform.x;
	item.transform.y = spot.transform.y;
	item.display.container.offset = spot.spot === 'r4' ? 0 : 100000 - item.hookY;
	item.hookspot = spot;
	spot.item = item.name;
	spot.btn.enabled = false;
	this.scene.loseItem();
	this.sfx('pickup', { rate: 0.8 });
	this.goto('close');
>>

::mite run
<<do
	this.resetMite = async () => {
		this.tween(this.mite.display.container, 'alpha', 0, 400);
		this.mite.walkBy(0, 1000);
		await this.delay(500);
		this.mite.display.container.offset = 90000;
		this.mite.setPosition(3, -448-50);
		this.tween(this.mite.display.container, 'alpha', 1, 1000, 0, this.ease.cubicOut);
		await this.mite.walkTo(3, -448);
		this.mite.roam.range = [0, 50];
	};

	const middleBeamUpper = [5, -380];
	const middleBeamLower = [5, -126];
	const rightBeamLower = [335, -250];
	const rightBeamUpper = [333, -310];
	const beetleHook = [184, -383];
	const pastWall = [57, -447];
	const middleBeamCenter = [3, -193];
	const chandelierHook = [-305, -368];

	const isRope = (spot) => {
		return spot.item === 'rope';
	};
	const ropeExit = () => {
		this.sfx('rustle');
		this.tween(this.scene.find('rope').display.container.scale, 'y', 1, 250, 1.1, t => 1-Math.cos(t*250*0.02)*(1-t));
		this.resetMite();
		this.camPoint = undefined;
		this.goto('close');
	};
	const isWheel = (spot) => {
		return spot.item === 'wheel';
	};
	const wheelExit = async (...spots) => {
		this.sfx('rustle', { rate: 2 });
		this.tween(this.scene.find('wheel').display.container, 'angle', 0, 250, -10, t => 1-Math.cos(t*250*0.02)*(1-t));
		await spots.reduce(async (p, spot) => {
			await p;
			await this.mite.walkTo(...(spot.transform ? [spot.transform.x, spot.transform.y] : spot));
		}, Promise.resolve());
		this.resetMite();
		this.camPoint = undefined;
		this.goto('close');
	};

	(async () => {
		this.camPoint = this.mite.transform;
		await this.mite.walkTo(...middleBeamUpper);
		await this.delay(200);

		const hookspots = this.scene.findAll('hook').reduce((acc, i) => {
			acc[i.spot] = i;
			return acc;
		}, {});

		if (!hookspots.r1.item || isWheel(hookspots.l1)) { // right branch
			await this.mite.walkTo(...middleBeamLower);
			await this.delay(200);
			await this.mite.walkTo(hookspots.r1.transform.x, hookspots.r1.transform.y);
			if (isRope(hookspots.r1)) return ropeExit();
			if (isWheel(hookspots.r1)) return wheelExit(middleBeamLower);
			await this.mite.walkTo(hookspots.r2.transform.x, hookspots.r2.transform.y);
			if (isRope(hookspots.r2)) return ropeExit();
			if (isWheel(hookspots.r2)) return wheelExit(hookspots.r1, middleBeamLower);
			await this.mite.walkTo(hookspots.r3.transform.x, hookspots.r3.transform.y);
			if (isRope(hookspots.r3)) return ropeExit();
			if (isWheel(hookspots.r3)) return wheelExit(hookspots.r2, hookspots.r1, middleBeamLower);
			await this.mite.walkTo(...rightBeamLower);
			this.mite.display.container.offset = 0;
			await this.mite.walkTo(...rightBeamUpper);
			await this.mite.walkTo(hookspots.r4.transform.x, hookspots.r4.transform.y);
			if (isRope(hookspots.r4)) return ropeExit();
			if (isWheel(hookspots.r4)) return wheelExit(rightBeamUpper);
			await this.mite.walkTo(...beetleHook);
			if (!this.smashedPeanut) {
				this.smashedPeanut = true;
				this.goto('smash peanut');
			} else {
				this.goto('smash peanut again');
			}
			await this.mite.walkTo(...pastWall);
		} else { // left branch
			await this.mite.walkTo(...middleBeamCenter);
			await this.mite.walkTo(hookspots.l1.transform.x, hookspots.l1.transform.y);
			if (isRope(hookspots.l1)) { // bread branch
				this.sfx('rustle');
				this.tween(this.scene.find('rope').display.container.scale, 'y', 1, 250, 1.1, t => 1-Math.cos(t*250*0.02)*(1-t));
				this.mite.display.container.offset = 9500;
				await this.mite.walkTo(-53, -116);
				if (!this.knockedBread) {
					this.knockedBread = true;
					this.goto('knock bread');
					await this.delay(500);
					await this.mite.walkTo(-11, -112);
					await this.delay(500);
				} else {
					await this.mite.walkTo(-11, -112);
					this.goto('knock bread again');
				}
				this.resetMite();
				return;
			}
			if (isWheel(hookspots.l1)) return wheelExit(middleBeamCenter);
			await this.mite.walkTo(hookspots.l2.transform.x, hookspots.l2.transform.y);
			if (isRope(hookspots.l2)) return ropeExit();
			if (isWheel(hookspots.l2)) return wheelExit(hookspots.l1, middleBeamCenter);
			await this.mite.walkTo(hookspots.l3.transform.x, hookspots.l3.transform.y);
			if (isRope(hookspots.l3)) return ropeExit();
			if (isWheel(hookspots.l3)) return wheelExit(hookspots.l2, hookspots.l1, middleBeamCenter);
			await this.mite.walkTo(...chandelierHook);
			await this.delay(500);
			if (this.scene.find('chandelier')) {
				this.goto('drop chandelier');
			} else {
				this.goto('drop chandelier again');
			};
		}
		this.resetMite();
	})();
>>

::drop chandelier
<<do
	const chandelier = this.scene.find('chandelier');
	this.camPoint = chandelier.transform;
	this.tween(chandelier.transform, 'x', chandelier.transform.x, 1200, chandelier.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		this.tween(chandelier.transform, 'y', chandelier.transform.y + 170, 400, undefined, this.ease.cubicIn);
		// TODO: chain sfx


		setTimeout(() => {
			this.scene.screenFilter.flash([255,255,255], 200, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			this.destroy(chandelier);
			this.add(
				this.Item({ texture: 'candle', x: -53, y: -177, offset: 0, use: {
					player: [`p:"ouch! that's hot"`],
					rope: [`p:"bit overkill for a wick"`],
					poster: [`p:"got a feeling that would also be a crime"`],
				}, }),
				this.Prop({ texture: 'dropped chandelier', x: -92, y: -144, offset: -17 }),
			);
			this.scene.drop(
				this.Poly({ verts: [-78,-163, -111,-162] }),
			);
			// TODO: crash sfx

			this.goto('drop chandelier1');
		}, 400);
	}, 800);
>>
::drop chandelier1
<<do
	this.gameObject = this.scene.find('mook');
	this.shock(this.gameObject, 500);
	this.camPoint = undefined;
>>
"geez louwheeze!!"
>
"ya tryin' ta scare me ta death!?"
[[>close]]

::drop chandelier again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = null;
>>
"i don't think a chandelier can drop twice..."
[[>close]]

::light fuse
<<do
	this.scene.loseItem(true);
	this.scene.find('fuse');
	this.gameObject.spr.alpha = 1;
	this.gameObject.use.undefined = ['p:"must be one of those slow burning fuses"', 'p:"very, very slow burning..."'];
	this.gameObject.use.other = [`p:"fusing those won't do anything"`, `p:"it's already lit"`];
	this.gameObject.btn.resetCycles();
	this.waterHowldId = this.sfx('water', { volume: 0.5, rate: 8, loop: true });
	this.waterHowl = window.Howler._howls.find(i => i._src.includes('water'));

	setTimeout(() => {
		this.goto('light fuse1');
	}, 1000);
>>
::light fuse1
<<do this.gameObject = this.scene.find('mook');>>
"uh..."
<<do
	const mook = this.scene.find('mook');
	(async () => {
		await this.delay(800);
		mook.flipped = true;
		this.shock(mook, 200);
		await this.delay(800);
		mook.flipped = false;
		this.shock(mook, 200);
		await this.delay(800);
		this.goto('light fuse2');
	})();
>>
::light fuse2
"i'm outta here!"
<<do
	const mook = this.scene.find('mook');
	(async () => {
		const [t1, t2] = this.shock(this.scene.find('mook'), 1200);

		await this.delay(1200-800);
		var clicks = 10;
		for (let i = 0; i < clicks; ++i) {
			setTimeout(() => this.sfx('stepWood', { volume: 1-i/clicks, rate: 1 - Math.random()*0.1 }), i*150);
		}
		const t3 = this.tween(mook, 'x', 102, 800, undefined, this.ease.backIn);
		const t4 = this.tween(mook, 'y', -57, 800, undefined, this.ease.backIn);
		const t5 = this.tween(mook.display.container, 'alpha', 0, 800, undefined, this.ease.cubicIn);
		await this.delay(800);
		this.destroy(mook);
		this.tweenAbort(t1);
		this.tweenAbort(t2);
		this.tweenAbort(t3);
		this.tweenAbort(t4);
		this.tweenAbort(t5);
		this.gameObject = undefined;
		this.waterHowl.fade(0.5, 0, 10000, this.waterHowldId);
		setTimeout(() => {
			this.waterHowl.stop(this.waterHowldId);
		}, 10000);
		this.goto('close');
	})();
>>

::smash peanut
<<do
	const beetle = this.scene.find('trophy mount');
	this.camPoint = beetle.transform;
	this.tween(beetle.transform, 'x', beetle.transform.x, 1200, beetle.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		this.tween(beetle.transform, 'y', -247, 400, undefined, this.ease.cubicIn);
		// TODO: sfx?


		setTimeout(() => {
			this.scene.screenFilter.flash([255,255,255], 200, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			beetle.btn.enabled = false;
			beetle.spr.angle = -10;
			// TODO: crash sfx
			this.destroy(this.scene.find('peanut'));
			this.add(
				this.gameObject = this.Hotspot({ label: 'peanut', texture: 'peanut smashed', x: 166, y: -228, offset: -15, use: {
					undefined: [`p:"it used to be a peanut"`, `p:"it looks very mushy..."`],
					'bread slice': ['goto:butter bread'],
					other: [`p:"i don't want to slather that in peanut"`],
				}, }),
			);

			this.goto('smash peanut2');
			this.camPoint = undefined;
		}, 400);
	}, 800);
>>

::smash peanut2
<<do
	const crook = this.scene.find('crook');
	crook.flipped = false;
	this.shock(crook, 500);
	const teller = this.scene.find('teller');
	this.shock(teller, 600);
	this.gameObject = teller;
>>
"gadzooks!!"
>
<<do
	this.gameObject = this.scene.find('crook');
	this.shock(this.gameObject, 250);
	this.gameObject.btn.use.undefined = [`"swear ah saw sumtin move over dere"`, `"back off kid, yer distractin' me"`];
	this.gameObject.btn.resetCycles();
>>
"this place is fallin' apart..."
>
"all da more reason to clean house"
[[>close]]

::smash peanut again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = undefined;
>>
"i don't think it likes peanuts"
[[>close]]


::knock bread
<<do
	const bread = this.scene.find('bread');
	this.tween(bread.transform, 'x', bread.transform.x, 1600, bread.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		bread.display.container.offset = 0;
		this.tween(bread.transform, 'y', bread.transform.y + 170, 400, undefined, this.ease.cubicIn);
		// TODO: chain sfx


		setTimeout(() => {
			this.scene.screenFilter.flash([255,255,255], 200, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			this.destroy(bread);
			this.add(
				this.Prop({ texture: 'busted bread', x: -40, y: -27, offset: -17 }),
			);
			// TODO: crash sfx
			this.add(
				this.Item({ texture: 'bread slice', x: -74, y: -45, offset: -50, use: {
					player: [`p:"i'm not eating that"`, `p:"maybe someone else'll eat it though"`],
				}, }),
			);
			this.goto('close');
			this.camPoint = undefined;
		}, 400);
	}, 1200);

>>

::knock bread again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = undefined;
>>
"don't think it wants anything else on that shelf"
[[>close]]

::butter bread
<<if !this.buttered>>
<<do
	this.buttered = true;
	this.scene.sprCarrying.texture = this.tex('bread slice buttered');
	const slice = this.scene.find('bread slice');
	slice.texture = 'bread slice buttered';
	slice.spr.texture = this.tex('bread slice buttered');
>>
*plaf* *smear* *plap* smush*
[[>close]]
<<else>>
<<do this.gameObject = this.scene.player>>
"i think it's peanutty enough"
[[>close]]
<<endif>>

::give bread
<<if this.buttered>>
"hm... well i am pretty hungry"
<<do
	this.fed = true;
	this.scene.loseItem(true);
>>
[[>give bread2]]
<<else>>
<<do this.scene.loseItem();>>
"bread? alone???"
[[>close]]
<<endif>>

::give bread2
<<do this.voice = 'None'>>
<<do this.sfx('bite')>>
*munch* *monch* *mounch* *muonch*
>
<<do this.voice = 'Default'>>
"yum yum"
>
"fine take my oil i don't care anymore"
[[>close]]


::take oil
<<if this.fed>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('snake oil\nsalesbun')>>
<<do this.goto('take oil hint')>>
<<endif>>

::use on oil
<<if this.fed>>
<<do this.gameObject = this.scene.player>>
<<do this.scene.loseItem()>>
"that doesn't need oiling"
[[>close]]
<<else>>
<<do this.gameObject = this.scene.find('snake oil\nsalesbun')>>
<<do this.scene.loseItem();>>
<<do this.goto('take oil hint')>>
<<endif>>

::take oil hint
<<do this.oilhint = ((this.oilhint || 3) + 1) % 3;>>
<<print [
	`"no free samples bucko"`,
	`"gotta pay for that"`,
	`"can't live on bread alone"`,
][this.oilhint]>>
[[>close]]

::oil vault
<<do
	this.oiled = true;
	this.scene.loseItem();
>>
*oil* *oil* *oil* *oil*
[[>close]]

::open vault
<<if this.oiled>>
	<<do
		this.gameObject.btn.enabled = false;
		const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: -190, y: -160, use: {
			undefined: [`goto:goto soap`],
		}, });
		h.spr.width = 50;
		h.spr.height = 100;
		this.add(h);
		// TODO: sfx
		this.tween(this.gameObject.transform, 'x', this.gameObject.transform.x + 50, 1500, undefined, this.ease.cubicInOut);
		this.tween(this.gameObject.transform, 'y', this.gameObject.transform.y - 25, 1500, undefined, this.ease.cubicInOut);
		this.camPoint = this.gameObject.transform;
		const mook = this.scene.find('mook');
		if (mook) {
			mook.btn.use.undefined = [`"thanks for da door help kid"`, `"but still. back off"`];
		}
		this.scene.find('teller').btn.use.undefined = [`"oh, you fixed da door?"`, `"coulda maybe picked a better time..."`, `"sigh"`];
		setTimeout(() => {
			this.camPoint = undefined;
			this.goto('close');
		}, 1500);
	>>
<<else>>
<<do this.gameObject = this.scene.player>>
"it's stuck"
[[>close]]
<<endif>>

::vault blocked
<<do this.gameObject = this.scene.find('mook'); this.shock(this.gameObject, 250);>>
"woah woah hold your horses"
>
"no one but da big boss is steppin' in dere"
[[>close]]

::goto soap
<<if this.scene.find('mook')>>
	<<do this.goto('vault blocked')>>
<<else>>
	<<do this.gotoItemRoom({ x: -190, y: -160 }, 'soap');>>
<<endif>>

::soap
<<do this.itemRoomPickup('soap1')>>

::soap1
you got the soap.
>
<<do this.gotoNoOne();>>

::give soap
<<do this.scene.loseItem();>>
<<do this.gameObject = this.noone>>
"ah, the bar of soap."
>
"this will play a crucial part."
>
<<do this.gameObject = this.scene.player>>
"they had a lot of soap..."
>
"why didn't you ask for more?"
>
<<do this.gameObject = this.noone>>
"no one will miss just one."
>
<<do this.gameObject = this.scene.player>>
"..."
>
<<do this.gameObject = this.noone>>
"..."
>
"hmm. just one more object."
>
"a half-eaten sandwich..."
>
"the mice in the kitchen have one."
>
"it will be guarded well..."
>
"but you will think of something."
>
<<do
	this.leaveNoOne({ area: 'mouse town center', x: 50, y: -100 });
	this.scene.player.floor = 'Counter';
>>



// 88d8b.d8b. .d8888b. dP    dP .d8888b. .d8888b.
// 88'`88'`88 88'  `88 88    88 Y8ooooo. 88ooood8
// 88  88  88 88.  .88 88.  .88       88 88.  ...
// dP  dP  dP `88888P' `88888P' `88888P' `88888P'
::light stove
<<if this.scene.animatorCarrying.animation === 'matchbox_carrying'>>
<<do
	this.gameObject = this.scene.player;
	this.scene.loseItem();
>>
"can't light it with an unlit match"
[[>close]]
<<else>>
<<do
	(async () => {
		this.add(
			this.Prop({ texture: 'stove light', freq: 1/200, x: 208, y: 0, offset: 1000 }),
		);
		this.gameObject.btn.enabled = false;
		this.scene.screenFilter.flash([255,125,0], 200);
		this.scene.loseItem();
		const smith = this.scene.find('stubborn smith');
		smith.btn.use.undefined = [`"mmmmake..."`, `"mm.. material..."`, `"mhm... metal.. wood.."`];
		smith.btn.use.foil = ['goto:give foil'];
		smith.btn.use.toothpicks = ['goto:give toothpicks'];
		smith.btn.use.fork = [`"mm.. no... fresh metal only..."`];
		smith.btn.use.spoon = [`"mm.. no... fresh metal only..."`];
		smith.btn.resetCycles();

		await this.delay(500);
		this.camPoint = { x: this.size.x, y: this.size.y };
		smith.flipped = false;
		await this.delay(500);
		this.gameObject = smith;
		scene.dialogue.say('"finally"');
		await this.delay(1500);
		scene.dialogue.say('');
		// TODO: sfx
		this.scene.screenFilter.flash([250/3,200/3,150/3], 150, this.ease.cubicOut);
		this.shock(smith, 250);
		await this.delay(500);
		this.scene.screenFilter.flash([250/2,200/2,150/2], 150, this.ease.cubicOut);
		this.shock(smith, 300);
		await this.delay(500);
		this.scene.screenFilter.flash([250,200,150], 150, this.ease.cubicOut);
		this.shock(smith, 450);
		await this.delay(1500);
		smith.flipped = true;
		this.add(
			this.Item({ texture: 'ring', x: 149, y: -69,          offset: 69, use: {
				player: [`p:"it's a pretty ring"`],
			}, }),
		);
		this.sfx('pickup', { rate: 0.8 });
		this.camPoint = undefined;
		this.goto('close');
	})();
>>
<<endif>>

::take juice
<<if this.gaveRing>>
<<do this.goto('generic item')>>
<<else>>
<<do
	this.gameObject = this.scene.find('jumpy juicemonger');
	this.shock(this.gameObject, 400);
>>
"wohhh...! not! free...!!"
[[>close]]
<<endif>>

::give ring
<<do
	this.scene.loseItem(true);
	this.gaveRing = true;
	this.scene.find('jumpy juicemonger').btn.use.undefined = [`"weee... pretty"`, `"whhoo... friend..? drink...!"`];
	this.scene.find('jumpy juicemonger').btn.resetCycles();
>>
"whaaa.."
>
<<do
	this.sfx('rustle');
	this.scene.screenFilter.flash([30,40,60], 300, this.ease.cubicIn);
	const spr = new this.PIXI.Sprite(this.tex('ring_carrying'));
	spr.scale.x *= -1;
	spr.x = 5;
	spr.y = -49;
	const juice = this.scene.find('jumpy juicemonger');
	juice.spr.addChild(spr);
	this.shock(this.scene.find('jumpy juicemonger'), 500);

	setTimeout(() => {
		this.goto('give ring1');
	}, 1000);
>>

::give ring1
"wehehe... finally..."
>
"friend.. take... whhhhaatever..."
[[>close]]


::take key
<<if this.juiced>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('stuffy shopkeep')>>
"kffkf... k-key.. mine..."
[[>close]]
<<endif>>

::give juice
<<if this.juiced>>
<<do this.scene.loseItem();>>
"khh... not thirsty.. no more"
[[>close]]
<<else>>
<<do
	this.scene.loseItem();
	this.juiced = true;
	this.scene.find('stuffy shopkeep').btn.use.undefined = [`"kh.. keep..."`, `"kfhkf.. krfffkkf... khf.."`];
	this.scene.find('stuffy shopkeep').btn.resetCycles();
	this.goto('give juice2');
>>
<<endif>>

::give juice2
"khhfhhf... hmmf...?"
>
// TODO: sfx
<<do this.scene.screenFilter.flash([12,25,40], 600, this.ease.cubicIn)>>
*sluuurrrrrp*
>
<<do this.shock(this.scene.find('stuffy shopkeep'), 250)>>
"kahhh... good..."
>
"here.. key... yours..."
[[>close]]


::windup key
<<do
	this.scene.loseItem(true);
	this.scene.find('can front wKey').spr.texture = this.tex('can front');
	this.destroy(this.scene.find('horseNoKey'));
	this.add(
		this.Prop({ texture: 'horseKey', animate: false, x: -128, y: 0,   offset: -35 }),
	);

	this.sfx('pickup', { rate: 0.8 });
	setTimeout(() => {
		this.goto('windup key1');
	}, 1000);
>>

::windup key1
<<do
	this.destroy(this.scene.find('horseKey'));
	this.add(
		this.Prop({ texture: 'horseKey', freq: 1/100, x: -128, y: 0,   offset: -35 }),
	);
	this.gameObject = this.scene.find('horseKey');
	const clicks = 30;
	for (let i = 0; i < clicks; ++i) {
		setTimeout(() => this.sfx('pickup', { volume: 1-i/clicks, rate: 1 + i/clicks*0.2 }), i*80);
	}
	this.voice = 'None';
>>
*wind*
>
"*whinny*"
<<do
	(async () => {
		this.destroy(this.cartPoly);
		this.destroy(this.scene.find('horse'));
		this.cartPoly = null;
		const horse = this.scene.find('horseKey');
		const cart = this.scene.find('cheeseCart');
		this.camPoint = cart.transform;
		this.tween(horse.transform, 'x', horse.transform.x + 200, 2000, undefined, this.ease.cubicIn);
		this.tween(horse.transform, 'y', horse.transform.y + 200, 2000, undefined, this.ease.cubicIn);
		this.tween(cart.transform, 'x', cart.transform.x + 200, 2000, undefined, this.ease.cubicIn);
		this.tween(cart.transform, 'y', cart.transform.y + 200, 2000, undefined, this.ease.cubicIn);

		const cheese = this.Item({ label: 'cheese', texture: 'cheeseFloor', x: -268, y: -107,   offset: -5, use: {
		}, });
		cheese.display.container.offset -= 100;
		this.add(cheese);

		await this.delay(1500);
		cheese.display.container.offset += 100;
		this.goto('windup key2');
	})();
>>

::windup key2
<<do this.voice = 'Default'>>
"h-hey, my horse!!"
<<do
	(async () => {
		const farmer = this.scene.find('cheesy coachmouse');
		this.gameObject = farmer;
		const [t1, t2] = this.shock(farmer, 1200);
		const t3 = this.tween(farmer, 'x', -33, 1200, undefined, this.ease.backIn);
		const t4 = this.tween(farmer, 'y', -7, 1200, undefined, this.ease.backIn);
		const t5 = this.tween(farmer.display.container, 'alpha', 0, 1200, undefined, this.ease.cubicIn);
		const clicks = 10;
		for (let i = 0; i < clicks; ++i) {
			setTimeout(() => this.sfx('stepStone', { volume: 1-i/clicks, rate: 1 - Math.random()*0.1 }), i*150);
		}
		await this.delay(1600);
		this.tweenAbort(t1);
		this.tweenAbort(t2);
		this.tweenAbort(t3);
		this.tweenAbort(t4);
		this.tweenAbort(t5);
		this.destroy(farmer);
		this.camPoint = undefined;
		this.gameObject = undefined;
		this.goto('close');
	})();
>>





::light match
<<if this.scene.sprCarrying.texture !== this.tex('matchbox_carrying')>>
<<do
	this.scene.loseItem();
	this.goto('close');
>>
<<else>>
<<do
	this.scene.animatorCarrying.setAnimation('matchbox_lit');
	this.scene.screenFilter.flash([255,125,0], 200);
	this.goto('close');
>>
<<endif>>

::melt wax
<<if this.scene.animatorCarrying.animation === 'matchbox_carrying'>>
	"hm no very unlit"
	[[>close]]
<<else>>
	<<do
		const toMelt = this.gameObject;
		(async () => {
			this.scene.screenFilter.flash([128,68,0], 500);
			const wax = this.Item({ texture: 'wax wad', x: -121, y: -298, alpha: 0, offset: -16, use: {
				player: [`p:"it's a pile of soft, warm wax"`],
				matchbox: [`p:"that's already melted"`],
				'cookie cutter': [`p:"it'd be easier the other way around"`],
				other: [`p:"why would i put that in wax..."`],
				otherTarget: [`p:"why would i cover that in wax..."`],
			}, });
			this.add(wax);
			const t1 = this.tween(toMelt.display.container, 'alpha', 0, 600, undefined, this.ease.cubicIn);
			this.tween(wax.spr, 'alpha', 1, 1000, undefined, this.ease.cubicOut);
			this.sfx('bite', { rate: 2.0, volume: 0.4 });
			await this.delay(1000);
			this.tweenAbort(t1);
			this.destroy(toMelt);
			this.destroy(this.polyWax);
			this.polyWax = this.Poly({ verts: [-97,-310, -120,-311, -146,-324], width: 15 });
			this.scene.drop(this.polyWax);
			this.goto('close');
		})();
	>>
<<endif>>
<<do this.scene.loseItem();>>
<<do this.gameObject = this.scene.player>>

::shape wax
<<do
	const cookie = this.gameObject.cookie;
	const carrying = this.scene.carrying;
	this.gameObject = this.scene.player;
	this.scene.loseItem();
	(async () => {
		let poly;
		let wax;
		switch (cookie) {
			case 'snowman':
				poly = this.Poly({ verts: [-118,-315, -98,-313], width: 15 }); // snowman
				wax = this.Hotspot({ texture: 'wax snowman', x: -103, y: -303, alpha: 0, offset: 0, use: {
					undefined: [`p:"seems fragile..."`, `p:"i don't need a snowman though"`],
					matchbox: ['goto:melt wax'],
				}, });
				break;
			case 'star':
				poly = this.Poly({ verts: [-133,-317, -98,-308], width: 12 }); // star
				wax = this.Hotspot({ texture: 'wax star', x: -108, y: -302, alpha: 0, offset: -10, use: {
					undefined: [`p:"that's too big to pick up"`],
					matchbox: ['goto:melt wax'],
				}, });
				break;
			case 'tree':
				poly = this.Poly({ verts: [-118,-314] }); // tree
				wax = this.Hotspot({ texture: 'wax tree', x: -111, y: -305, alpha: 0, offset: -3, use: {
					undefined: ['goto:smash tree'],
					matchbox: ['goto:melt wax'],
					other: [`p:"i could probably just use my hands"`],
				}, });
				break;
		}

		this.scene.screenFilter.flash([128,0,68], 500);
		this.add(wax);
		const t1 = this.tween(carrying.display.container, 'alpha', 0, 600, undefined, this.ease.cubicIn);
		this.tween(wax.spr, 'alpha', 1, 1000, undefined, this.ease.cubicOut);

		this.sfx('bite', { rate: 2.4, volume: 0.4 });
		await this.delay(1000);
		this.tweenAbort(t1);
		this.destroy(carrying);
		this.destroy(this.polyWax);
		this.polyWax = poly;
		this.scene.drop(poly);
		this.goto('close');
	})();
>>

::smash tree
<<do
	this.sfx('bite', { rate: 2.4, volume: 0.4 });
	this.tween(this.scene.camera, 'shake', 0, 400, 2, this.ease.cubicIn);
	this.scene.screenFilter.flash([20,20,20], 200, this.ease.cubicOut);
	const tree = this.scene.find('wax tree');
	tree.spr.texture = this.tex('wax tree broken');
	tree.btn.enabled = false;

	this.add(
		this.Item({ label: 'star', texture: 'wax tree star', x: -89, y: -280,    offset: -5, use: {
		}, }),
	);
	this.goto('close');
>>


::swap cutter
<<do
	const a = this.gameObject;
	const b = this.scene.carrying;
	this.scene.find(`cutter ${a.cookie} ${a.pos}`).spr.alpha = 0;
	this.scene.find(`cutter ${b.cookie} ${b.pos}`).spr.alpha = 0;
	[a.cookie, b.cookie] = [b.cookie, a.cookie];
	[a.carrying, b.carrying] = [b.carrying, a.carrying];
	this.scene.find(`cutter ${a.cookie} ${a.pos}`).spr.alpha = 1;
	this.scene.find(`cutter ${b.cookie} ${b.pos}`).spr.alpha = 1;
	this.sfx('pickup', { rate: 0.8 });

	this.destroy(this.polyCutter);
	let poly;
	switch (a.cookie) {
		case 'snowman':
			this.polyCutter = this.Poly({ verts: [-344,-211, -320,-215, -311,-242, -296,-259, -309,-266, -348,-237] }); // snowman
			break;
		case 'star':
			this.polyCutter = this.Poly({ verts: [-306,-272, -311,-247, -286,-246, -277,-226, -298,-224, -295,-211, -316,-220, -339,-206] }); // star
			break;
		case 'tree':
			this.polyCutter = this.Poly({ verts: [-347,-197, -335,-208, -318,-201, -312,-254, -298,-261, -347,-241] }); // tree
			break;
	}
	this.scene.drop(this.polyCutter);
	this.scene.loseItem();
	this.goto('close');
>>

::fill cap
<<if this.capFilled>>
<<do this.gameObject = this.scene.player>>
"there's plenty of water already"
[[>close]]
<<elseif this.fountainOff>>
<<do this.gameObject = this.scene.player>>
"with what water?"
[[>close]]
<<else>>
<<do
	this.capFilled = true;
	const cap = this.scene.find('bottle cap');
	cap.texture = 'bottle cap filled';
	cap.spr.texture = this.tex('bottle cap filled');
	cap.btn.use.player = [`p:"i filled it with water"`, `p:"it's a bottle cap"`];
	cap.btn.resetCycles();
	this.goto('close');
>>
<<endif>>
<<do this.scene.loseItem()>>

::give foil
<<do
	this.scene.loseItem();
	this.gaveFoil = true;
	const smith = this.scene.find('stubborn smith');
	smith.btn.use.foil = [`"mmore mmetal..?"`];
	smith.btn.resetCycles();
>>
"mmm.. metal... yes..."
<<if this.gaveToothpicks>>
[[>make sword]]
<<else>>
[[>close]]
<<endif>>


::give toothpicks
<<do
	this.scene.loseItem();
	this.gaveToothpicks = true;
	const smith = this.scene.find('stubborn smith');
	smith.btn.use.toothpicks = [`"mhmmeh.. plenty..."`];
	smith.btn.resetCycles();
>>
"mhm.. strong.. wood..."
<<if this.gaveFoil>>
[[>make sword]]
<<else>>
[[>close]]
<<endif>>


::make sword
<<do this.scene.find('stubborn smith').flipped = false;>>
"mhmhmhm... materials.. ready..."
>
<<do
	(async () => {
		const smith = this.scene.find('stubborn smith');
		this.camPoint = { x: this.size.x, y: this.size.y };
		await this.delay(1500);
		// TODO: sfx
		this.scene.screenFilter.flash([250/3,200/3,150/3], 150, this.ease.cubicOut);
		this.shock(smith, 250);
		await this.delay(500);
		this.scene.screenFilter.flash([250/2,200/2,150/2], 150, this.ease.cubicOut);
		this.shock(smith, 300);
		await this.delay(500);
		this.scene.screenFilter.flash([250,200,150], 150, this.ease.cubicOut);
		this.shock(smith, 450);
		await this.delay(1500);
		smith.flipped = true;
		this.add(
			this.Item({ texture: 'hot sword', x: 277, y: -72,          offset: 75, use: {
				'bottle cap': ['goto:cool sword'],
				otherTarget: [`p:"ow! that's too hot to move..."`, `p:"i can't move the sword while it's hot"`],
			}, }),
		);
		this.goto('close');
		smith.btn.use.undefined = [`"mm..."`, `"mmmmmagnificent..."`];
		smith.btn.resetCycles();
		this.camPoint = undefined;
	})();
>>


::cool sword
<<if this.capFilled>>
<<do
	this.scene.loseItem();
	this.destroy(this.gameObject);
	this.add(
		this.Item({ texture: 'cool sword', x: 277, y: -72,          offset: 75, use: {
		}, }),
	);
	this.gameObject = undefined;
	this.goto('close');
>>
<<else>>
<<do this.goto('generic use')>>
<<endif>>

::give sword
"hahaha.. yesss...!"
<<do
	// TODO: sfx
	this.scene.loseItem(true);
	this.scene.screenFilter.flash([20,20,20], 300, this.ease.cubicIn);
	const spr = new this.PIXI.Sprite(this.tex('cool sword'));
	spr.scale.y *= -1;
	spr.x = -33;
	spr.y = 21;
	const sitting = this.scene.find('haughty hooligan');
	sitting.spr.addChild(spr);
	sitting.btn.use.undefined = [`"hehehe... haha.. heh..."`, `"heh.. heehee..."`, `"haha...!"`];
	sitting.btn.use.other = [`"heh.. worse than sword..."`, `"hmph.. don't need..."`];
	sitting.btn.resetCycles();
	this.shock(sitting, 1000);
	this.gaveSword = true;
>>
[[>close]]

::take pill
<<if this.gaveSword>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('haughty hooligan')>>
"he-hey.. guardin' those..."
[[>close]]
<<endif>>

::drop pill
<<do
	(async () => {
		this.scene.loseItem(true);
		const pill = this.Prop({ texture: 'pill_carrying', x: 179, y: -385, offset: 10000 });
		const guard = this.scene.find('sleepy sentry');
		this.camPoint = pill.transform;
		this.add(
			pill,
		);
		this.tween(pill.transform, 'x', pill.transform.x, 1200, pill.transform.x + 10, (t) => 1-(Math.random()-0.5)*(1-t));
		await this.delay(400);
		this.tween(pill.transform, 'y', -257 - 30, 400, undefined, this.ease.cubicIn);
		await this.delay(400);
		this.destroy(pill);
		this.camPoint = guard.transform;
		this.scene.screenFilter.flash([255,128,128], 200, this.ease.cubicOut);
		const ts = this.shock(guard, 450);
		await this.delay(800);
		// TODO: sfx
		this.scene.screenFilter.flash([40,20,20], 200, this.ease.cubicOut);
		ts.forEach(i => this.tweenFinish(i));
		guard.spr.angle = 90;
		guard.spr.x -= 20;
		guard.spr.y -= 30;
		guard.y += 30;
		guard.bodyCollision.body.isSensor = true;
		guard.shadow.visible = false;
		guard.bounce = 0;
		guard.btn.use = {
			undefined: [`p:"...they're probably fine"`, `"zzz..."`],
		};
		guard.btn.resetCycles();
		this.knockedOut = true;
		this.camPoint = undefined;
		this.goto('close');
	})();
>>

::pickup coin
<<if this.fountainOff>>
<<do this.goto('generic item')>>
<<else>>
<<do this.goto('generic use')>>
<<endif>>

::toggle fountain
<<do
	setTimeout(() => {
		this.sfx('chunk', { rate: 1.5, volume: 0.25 });
	}, 1000);
	setTimeout(() => {
		this.fountainOff = !this.fountainOff;
		if (this.fountainOff) {
			this.tween(this.sfxWater, 'volume', 0, 1000);
			this.tween(this.scene.find('fountain').spr,      'alpha', 1, 600, undefined, this.ease.cubicInOut);
			this.tween(this.scene.find('fountainWater').spr, 'alpha', 0, 800, undefined, this.ease.cubicIn);
		} else {
			this.tween(this.sfxWater, 'volume', 0.5, 1000);
			this.tween(this.scene.find('fountain').spr,      'alpha', 0, 800, undefined, this.ease.cubicIn);
			this.tween(this.scene.find('fountainWater').spr, 'alpha', 1, 600, undefined, this.ease.cubicInOut);
		}
		this.goto('close');
	}, 1500);
>>

::give coin
<<do
	this.scene.loseItem();
	this.bribed = true;
>>
"hrhr...?"
>
"hh.. ok... i get it.."
>
"have at it..."
<<do
	(async () => {
		const guard = this.scene.find('grumpy guard');
		this.gameObject = guard;
		const [t1, t2] = this.shock(guard, 1200);
		const t3 = this.tween(guard, 'x', -36, 1200, undefined, this.ease.backIn);
		const t4 = this.tween(guard, 'y', -284, 1200, undefined, this.ease.backIn);
		var clicks = 10;
		for (let i = 0; i < clicks; ++i) {
			setTimeout(() => this.sfx('stepStone', { volume: 1-i/clicks, rate: 1 - Math.random()*0.1 }), i*150);
		}
		const t5 = this.tween(guard.display.container, 'alpha', 0, 1200, undefined, this.ease.cubicIn);
		await this.delay(1600);
		this.tweenAbort(t1);
		this.tweenAbort(t2);
		this.tweenAbort(t3);
		this.tweenAbort(t4);
		this.tweenAbort(t5);
		this.destroy(guard);
		this.gameObject = undefined;
		this.goto('close');
	})();
>>

::cheese poem
<<if this.scene.find('cheeseAltar')>>
<<do this.goto('reset cheese')>>
<<elseif !this.poemPromptCheese>>
<<do this.gameObject = this.scene.player; this.poemPromptCheese = true;>>
"there's something inscribed here..."
[[>close]]
<<else>>
<<do this.goto('cheese poem2')>>
<<endif>>

::cheese poem2
<<do this.scene.dialogue.textText.style.fontStyle = 'italic'>>
voicePoem
when hunger pains
>
are what you feel
>
consume at once
>
the holy meal
>
<<do
	this.gameObject = this.scene.player;
	this.scene.dialogue.textText.style.fontStyle = 'normal';
>>
voiceDefault
"hmm..."
[[>close]]

::star poem
<<if this.scene.find('starAltar')>>
<<do this.goto('reset star')>>
<<elseif !this.poemPromptStar>>
<<do this.gameObject = this.scene.player; this.poemPromptStar = true;>>
"there's something inscribed here..."
[[>close]]
<<else>>
<<do this.goto('star poem2')>>
<<endif>>

::star poem2
<<do this.scene.dialogue.textText.style.fontStyle = 'italic'>>
voicePoem
if you get lost
>
when you go forth
>
my light is there
>
to guide you north
>
<<do
	this.gameObject = this.scene.player;
	this.scene.dialogue.textText.style.fontStyle = 'normal';
>>
voiceDefault
"hmm..."
[[>close]]

::place star
<<do
	this.scene.loseItem(true);
	this.add(
		this.Prop({ texture: 'starAltar', x: 110, y: -237,         offset: 8 }),
	);
	this.sfx('pickup', { rate: 0.8 });
	if (this.scene.find('cheeseAltar')) {
		this.goto('toggle fountain');
	} else {
		this.goto('close');
	}
>>

::place cheese
<<do
	this.scene.loseItem(true);
	this.add(
		this.Prop({ texture: 'cheeseAltar', x: -80, y: -204,       offset: 8 }),
	);
	this.sfx('pickup', { rate: 0.8 });
	if (this.scene.find('starAltar')) {
		this.goto('toggle fountain');
	} else {
		this.goto('close');
	}
>>

::reset star
<<do
	this.gameObject = this.scene.player;
	this.destroy(this.scene.find('starAltar'));
	this.add(
		this.Item({ label: 'star', texture: 'wax tree star', x: -89, y: -280,    offset: -5, use: {
		}, }),
	);
	if (this.scene.find('cheeseAltar')) {
		this.goto('toggle fountain');
	} else {
		this.goto('close');
	}
>>

::reset cheese
<<do
	this.gameObject = this.scene.player;
	this.destroy(this.scene.find('cheeseAltar'));
	this.add(
		this.Item({ label: 'cheese', texture: 'cheeseFloor', x: -268, y: -107,   offset: -5, use: {
		}, }),
	);
	if (this.scene.find('starAltar')) {
		this.goto('toggle fountain');
	} else {
		this.goto('close');
	}
>>


::gatehouse interrupt
<<do
	this.pushPlayer = true;
	this.goto('goto sandwich');
>>

::gatehouse reject
<<do
	const guards = [];
	if (!this.knockedOut) {
		guards.push([this.scene.find('sleepy sentry'), `"grr.. get back..."`]);
	}
	if (!this.bribed) {
		guards.push([this.scene.find('grumpy guard'), `"hrghrh.. not allowed..."`]);
	}
	const [guard, dlg] = this.shuffle(guards)[0];
	this.gameObject = guard;
	this.shock(guard, 250);
	this.dlg = dlg;
>>
<<print this.dlg>>
<<if this.pushPlayer>>
<<do
	this.pushPlayer = false;
	const spots = [
		{x: 59, y: -340},
		{x: 112, y: -269},
	];
	let spot;
	let d1 = Infinity;
	for (let i = 0; i < spots.length; ++i) {
		const d2 = Math.abs(spots[i].x - this.scene.player.transform.x) + Math.abs(spots[i].y - this.scene.player.transform.y);
		if (d2 < d1) {
			d1 = d2;
			spot = spots[i];
		}
	}
	this.scene.player.cancelWalkToMouse();
	this.scene.player.walkTo(spot.x, spot.y);
>>
<<endif>>
[[>close]]

::goto sandwich
<<if !this.knockedOut || !this.bribed>>
<<do this.goto('gatehouse reject')>>
<<else>>
	<<do this.gotoItemRoom({ x: 180, y: -369 }, 'sandwich');>>
<<endif>>

::sandwich
<<do this.itemRoomPickup('sandwich1')>>

::sandwich1
you got the sandwich.
>
<<do this.gotoNoOne();>>

::give sandwich
<<do this.scene.loseItem();>>
<<do this.gameObject = this.noone>>
"yes, the half-eaten sandwich."
>
<<do this.gameObject = this.scene.player>>
"i don't get it..."
>
"don't you want a full sandwich?"
>
<<do this.gameObject = this.noone>>
"no one wants a half-eaten sandwich."
>
<<do this.gameObject = this.scene.player>>
"you keep saying that..."
>
<<do this.gameObject = this.noone>>
"do not worry your little head."
>
"you have done well. "
>
"all the objects are found."
>
<<do this.gameObject = this.scene.player>>
"can i go home now?"
>
<<do this.gameObject = this.noone>>
"yes, you may return to your world."
>
<<do
	(async () => {
		this.scene.player.expression = 'up';
		const d = 4000;
		const p = 30;
		this.tween(this.scene.player.spr, 'angle', 0, d, 50, t => 1-Math.sin(t*p)*(t));
		this.tween(this.scene.player, 'flipped', 0, d, 50, t => (1-Math.sin(t*p)) < 0.5);
		this.tween(this.scene.player.spr, 'y', 0, d, -200, t => 1-this.ease.cubicIn(t)+Math.sin(t*10)*-0.1);
		this.tween(this.scene.player.spr, 'x', 0, d, -50, (t) => 1-(this.ease.sineInOut(t*2) + this.ease.sineInOut(t*4))*t); 
		this.tween(this.scene.player.spr, 'alpha', 1, d, 0, (t) => 1-this.ease.cubicIn(t));
		this.scene.player.display.container.offset = 100000;

		await this.delay(d);
		this.scene.player.flipped = false;
		this.scene.player.display.container.visible = false;
		this.scene.player.expression = '';
		
		this.tween(this.scene.find('no one LR').display.container, 'alpha', 0, 1000);
		await this.delay(1000);
		this.tween(this.scene.find('no one UL').display.container, 'alpha', 0, 1000);
		await this.delay(800);
		this.tween(this.scene.find('no one LL').display.container, 'alpha', 0, 1000);
		await this.delay(800);
		this.goto('give sandwich1');
	})();
>>

::give sandwich1
"no one will miss you..."
>
<<do
	(async () => {
		this.tween(this.scene.find('no one Head').display.container, 'alpha', 0, 1000);
		await this.delay(1500);
		this.scrim(1, 0);
		this.scene.player.walkToMouse = () => {};
		this.scene.player.display.container.visible = false;
		this.scene.player.display.container.offset = 0;
		this.scene.goto({ area: 'ending' });
		this.gameObject = this.scene.find('playerText');
		this.camPoint = undefined;
		this.scrim(0, 2000);
		const doorStatic = this.scene.find('doorClosed');
		const doorAnim = this.scene.find('doorOpen');
		doorStatic.spr.alpha = 0;
		doorAnim.spr.alpha = 1;
		doorAnim.animator.active = false;
		await this.delay(2000);
		doorAnim.animator.setAnimation('doorOpen.1', { 12: 5 });
		doorAnim.animator.active = true;
		await this.delay(2700);
		doorAnim.animator.active = false;

		const guy = this.Prop({ texture: 'guy_big', tint: 0xa49484, alpha: 0, x: -69, y: -75, offset: 10000 });
		this.add(
			guy,
		);
		this.shock(guy, 2000);
		this.tween(guy.spr, 'x', 0, 2000, 50, this.ease.backOut);
		this.tween(guy.spr, 'alpha', 1, 2000);
		await this.delay(2500);
		doorAnim.spr.alpha = 0;
		doorStatic.spr.alpha = 1;
		this.tween(this.scene.camera, 'shake', 0, 500, 2, this.ease.cubicIn);
		this.sfx('chunk'),
		this.shock(guy, 1000);
		await this.delay(2000);


		this.goto('give sandwich2');
	})();
>>

::give sandwich2
voiceDefault
"..."
>
"what was all that??"
>
"hey, you!"
>
<<do
	(async () => {
		const doorStatic = this.scene.find('doorClosed');
		const doorAnim = this.scene.find('doorOpen');
		doorStatic.set('doorKnock1');
		await this.delay(100);
		doorStatic.set('doorKnock2');
		await this.delay(100);
		doorStatic.set('doorClosed');
		this.sfx('chunk', { rate: 2 });
		const t1 = this.Text('*TOC*', { x: 55, y: -363, fontSize: 48 });
		t1.text.anchor.y = 0.4;
		t1.text.anchor.x = 0.4;
		this.add(t1);
		this.tween(t1.display.container, 'alpha', 0, 2000);
		this.tween(t1.display.container, 'angle', 0, 2000, 15, t => 1-Math.sin(t*60)*this.ease.circOut(t));
		this.tween(t1.transform, 'y', t1.transform.y+20, 2000, undefined, this.ease.circOut);
		await this.delay(500);
		doorStatic.set('doorKnock1');
		await this.delay(100);
		doorStatic.set('doorKnock2');
		await this.delay(100);
		doorStatic.set('doorClosed');
		this.sfx('chunk', { rate: 1.9 });
		const t2 = this.Text('*TOC*', { x: 70, y: -330, fontSize: 48 });
		t2.text.anchor.y = 0.4;
		t2.text.anchor.x = 0.4;
		this.add(t2);
		this.tween(t2.display.container, 'alpha', 0, 2000);
		this.tween(t2.display.container, 'angle', 0, 2000, 15, t => 1-Math.sin(t*60)*this.ease.circOut(t));
		this.tween(t2.transform, 'y', t2.transform.y+20, 2000, undefined, this.ease.circOut);
		await this.delay(3000);
		this.goto('give sandwich3');
	})();
>>

::give sandwich3
"no answer..."
>
"but i thought no one lived here?"
>
<<do
	(async () => {
		const guy = this.scene.find('guy_big');
		this.tween(guy.spr, 'y', 20, 2000);
		this.tween(guy.spr, 'alpha', 0, 2000);
		await this.delay(2000);
		this.scrim(1, 2000);
		await this.delay(2000);
		this.scene.goto({ area: 'credits' });
		this.destroy(this.scene.find('back'));
		this.scrim(0, 2000);
		this.goto('close');
	})();
>>

::The End
blah blah
>
<<do
	this.show('black', { scale: this.size.x });
	this.tween(scene.camera.display.container, 'alpha', 0, 1000);

>>
blah blah
>
<<do
	this.character = '';
	this.show('title', { scale: 2 });
>>
<<print new Array(60).fill('\u200B').join('')>>
The End

[[Restart|this.restart()]]

::debug menu
<<do
	this.scene.strand.passages['area warp'] = { title: 'area warp', body: Object.keys(this.scene.areas).filter(i => i !== 'root').map(i => '[['+i+'|this.scene.goto({ area: "'+i+'" }); this.goto("close")]]').concat('[[back|this.back()]]').join('\n') };
>>
[[passage select>passage select]]
[[language select]]
[[area warp]]
[[teleport|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		this.scene.player.setPosition(p.x, p.y);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[toggle debugPhysics|window.debugPhysics=!window.debugPhysics]]
[[toggle player collision|this.scene.player.bodyCollision.body.isSensor = !this.scene.player.bodyCollision.body.isSensor]]
[[drawing tools]]
[[close]]
[[back|this.back()]]

::drawing tools
[[get coords|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		navigator.clipboard.writeText(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
		console.log(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[place props|
	const canvas = window.game.app.renderer.context.gl.canvas;

	const textures = () => Object.entries(resources).filter(([k,r]) => !k.match(/\.[2-9]\d*?$/) && !k.match(/^https?:/) && r?.baseTexture);

	let tex = 0;
	const spr = new this.PIXI.Sprite();
	spr.anchor.x = 0.5;
	spr.anchor.y = 1.0;
	this.scene.container.addChild(spr);
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		tex += d;
		const ts = textures();
		if (tex < 0) tex = ts.length - 1;
		tex %= ts.length;
		console.log(ts[tex][0]);
		spr.texture = ts[tex][1];
	};
	const onMove = (event) => {
		const p = this.mousePos(event);
		spr.x = Math.floor(p.x);
		spr.y = Math.floor(p.y);
	};
	const placed = [];
	let flip = false;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			if (placed.length) {
				const p = placed.pop();
				this.remove(p);
			}
			return;
		}
		if (event.shiftKey) {
			flip = !flip;
			spr.scale.x = flip ? -1 : 1;
			return;
		}
		const p = this.mousePos(event);
		const prop = this.Prop({ texture: textures()[tex][0], x: Math.floor(p.x), y: Math.floor(p.y), flip });
		placed.push(prop);
		this.add(prop);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		spr.destroy();
		const str = placed.map(p => `this.Prop({ texture: '${p.spr.texture.textureCacheIds[1]}', x: ${Math.floor(p.transform.x)}, y: ${Math.floor(p.transform.y)}${p.spr.scale.x < 0 ? ', flip: true' : ''} }),`).join('\n');
		navigator.clipboard.writeText(str);
		console.log(str);
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[draw walls|
	if (!window.debugPhysics) window.debugPhysics=true;
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	let poly;

	const getPos = (event) => {
		const p = this.mousePos(event);
		return [Math.round(p.x),Math.round(p.y)];
	};
	const makePoly = () => {
		if (poly) {
			this.destroy(poly);
		}
		if (verts.length > 0) {
			poly = this.Poly({ verts: verts.flat(), width }, { plugin: { interactive: true }});
			// this.add(poly);
		} else {
			poly = null;
		}
	};

	let width = 20;
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		width += d;
		width = Math.max(1, width);
		makePoly();
	};
	const onMove = (event) => {
		if (event.ctrlKey) return;
		event.preventDefault();
		event.stopPropagation();
		verts.pop();
		verts.push(getPos(event));
		makePoly();
	};
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			verts.pop();
		} else {
			verts.push(getPos(event));
		}
		makePoly();
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('pointerup', () => {
			canvas.removeEventListener('pointermove', onMove);
		}, { once: true });
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		if (poly) {
			navigator.clipboard.writeText(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}]${width === 20 ? '' : `, width: ${width}`} }),`);
			console.log(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}]${width === 20 ? '' : `, width: ${width}`} }),`);
			this.scene.drop(poly);
		}
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[back|this.back()]]

::credits
<<do
	this.scrim(1, 250);
	setTimeout(() => {
		this.scene.goto({ area: 'credits' });
		this.scrim(0, 250);
		this.goto('close');
	}, 250);
>>

::credits-sweetheartsquad
<<do window.open('https://sweetheartsquad.itch.io', '_blank'); this.goto('close');>>

::credits-aquiles
<<do window.open('https://famicase.com/23/softs/122.html', '_blank'); this.goto('close');>>

::credits-back
<<do
	this.scrim(1, 250);
	setTimeout(() => {
		this.scene.goto({ area: 'menu' });
		this.scrim(0, 250);
		this.goto('close');
	}, 250);
>>
