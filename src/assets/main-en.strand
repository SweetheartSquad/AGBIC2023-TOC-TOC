::start
// some info for if you want to mod it:
//
// basic syntax examples:
// 	::passage title
// 	[[basic link]]
// 	[[link with different label>passage title]]
// 	[[link with different action|this.something=true;this.goto('passage title');]]
// 	<<if this.something>><<elseif this.somethingElse>><<endif>>
// 	<<do this.something=true;>>
// 	<<print this.something>>
// 	>passage break
//
// js examples:
// 	this.goto('passage')
// 	this.show('texture', { duration, x, y, scale, animate, freq })
// 	this.scrim(amount, duration)
// 	this.tween(object, 'property', to, duration, from, ease)
// 	this.gameObject - npc/interrupt that triggered the dialog
// 	this.scene      - game scene
// 	this.voice      - audio to play as letters tick in
// 	this.ease       - easing functions
//
// game object stuff:
// 	this.Area(name, [objects])
// 	this.Npc({ passage, x, y )
// 	this.Goto({ area, x, y }, { x, y, width, height })
// 	this.Prop({ texture, x, y, alpha, scale, flip, blur, animate, offset })
// 	this.PropParallax({ texture, alpha, scale, flip, blur, mult, animate, offset }),
// 	this.Block({ x, y, width, height, type, radius })
// 	this.Poly({ x, y, width, verts })
// 	this.Interrupt({ passage, x, y, width, height })

<<if !this.started>>
<<do
	// save location on refresh when debugging
	if (this.debug && !window.debugUnload) {
		window.debugUnload = true;
		window.addEventListener('beforeunload', () => {
			// if (window.scene.strand.cleared) return;
			// window.scene.strand.savestate.area = window.scene.strand.scene.area;
			// window.scene.strand.savestate.x = window.scene.strand.scene.player.transform.x;
			// window.scene.strand.savestate.y = window.scene.strand.scene.player.transform.y;
			// window.scene.strand.save();
		});
	}
	// middle mouse click to go back in debug
	if (this.debug && !window.debugBack) {
		window.debugBack = true;
		window.addEventListener('pointerdown', (event) => {
			if (event.button === 1) {
				window.scene.strand.back();
			}
		});
	}

	const PropParallaxAuto = (options) => {
		const start = Date.now();
		const gameObject = this.PropParallax(options);
		gameObject.scripts.push({
			gameObject,
			update() {
				gameObject.spr.tilePosition.x = (Date.now()-start)/1000 * options.speed;
			},
		});
		return gameObject;
	};

	// stop roam during dialogues
	this.scene.dialogue.openo = this.scene.dialogue.open;
	this.scene.dialogue.open = () => {
		if (scene.currentArea) {
			scene.currentArea.filter(i => i.roam).forEach(i => i.roam.active = false);
		}
		this.scene.dialogue.openo();
	};
	this.scene.dialogue.closeo = this.scene.dialogue.close;
	this.scene.dialogue.close = () => {
		if (scene.currentArea) {
			scene.currentArea.filter(i => i.roam).forEach(i => i.roam.active = true);
		}
		this.scene.dialogue.closeo();
	};

	this.Area('empty', []);
	this.Area('intro', [
		this.Prop({ texture: 'bg_ship', y: 110, offset: -1000000 }),
		// this.Poly({ width: 4, verts: [72,-108, -66,-109, -68,-93, -105,-92, -114,-82, -114,15, -105,27, -78,26, -70,40, -60,58, 62,59, 77,44, 79,17, 93,10, 109,-6, 110,-82, 100,-93, 80,-95, 72,-108] }),
		this.Goto({ area: 'intro2' }, { x: 50, y: -104, width: 8, height: 5 }),

		this.Npc({ body: 'guy', x: -40, y: 40, roam: 50,
			use: {
				undefined: ['"hi"', '"hello"', 'goto:test npc passage'],
				coin: ['"is that for me?"', '"no thank you"'],
			},
		}),

		this.Item({ texture: 'coin', x: 50, y: 150 }),
		this.Item({ texture: 'key', x: 150, y: 150 }),
		this.Hotspot({ texture: 'lock', x: 50, y: 50,
			use: {
				undefined: ["it's locked", "it's a lock", "locked isn't it"],
				key: ["goto:unlock"],
				other: ["that won't unlock it", "no good, it's locked"],
			},
		}),
	]);

	// start
	this.started=true;
	this.scene.goto({ area: 'intro' });
	requestAnimationFrame(() => {
		this.scrim(1, 3000);
	});
>>
<<endif>>
<<do
	this.scene.dialogue.textText.style.fill = 0xffd20a;
	this.show('title2', { scale: 2, duration: 0 });
	this.scene.dialogue.textText.x = this.size.x / 2;
	this.scene.dialogue.textText.y = this.size.y / 2;
>>
TOC TOC
>start
<<do
	this.scene.dialogue.textText.style.fill = 0xffffff;
	this.music('bgm');
	this.show('').then(() => {this.goto('start2')});
>>

::start2
<<do
	this.tween(this.scene.border.display.container, 'alpha', 1, 1000);
	this.goto('main');
>>

::close
this should never render

::choiceDefault
continue

::talk to {}
talk to {}

::generic item
<<do this.gameObject.pickup(); this.goto('close')>>

::generic use
<<do this.gameObject = this.scene.player>>
<<print this.shuffle([
	`"i don't think that will work"`,
	`"i don't know about that..."`,
	`"nah"`,
])[0]>>
[[>close]]

::unlock
"i unlocked it!"
<<do
	this.Poof({ texture: 'wolfyRun', scale: 4, freq: 50, time: 1000, x: this.gameObject.transform.x, y: this.gameObject.transform.y });
	this.destroy(this.gameObject);
	this.scene.loseItem(true);
	this.gameObject = this.scene.player;
>>
[[>close]]

::test npc passage
"howdy"
>
"do you need something?"
[[>close]]


::The End
blah blah
>
<<do
	this.show('black', { scale: this.size.x });
	this.tween(this.scene.border.display.container, 'alpha', 0, 1000);
	this.tween(scene.camera.display.container, 'alpha', 0, 1000);
	
>>
blah blah
>
<<do
	this.character = '';
	this.show('title', { scale: 2 });
>>
<<print new Array(60).fill('\u200B').join('')>>
The End

[[Restart|this.restart()]]

::debug menu
<<do
	this.scene.strand.passages['area warp'] = { title: 'area warp', body: Object.keys(this.scene.areas).filter(i => i !== 'root').map(i => '[['+i+'|this.scene.goto({ area: "'+i+'" }); this.goto("close")]]').concat('[[back|this.back()]]').join('\n') };
>>
[[passage select>passage select]]
[[language select]]
[[area warp]]
[[teleport|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		this.scene.player.setPosition(p.x, p.y);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[toggle debugPhysics|window.debugPhysics=!window.debugPhysics]]
[[toggle player collision|this.scene.player.bodyCollision.body.isSensor = !this.scene.player.bodyCollision.body.isSensor]]
[[drawing tools]]
[[close]]
[[back|this.back()]]

::drawing tools
[[get coords|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		navigator.clipboard.writeText(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
		console.log(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[place props|
	const canvas = window.game.app.renderer.context.gl.canvas;

	const textures = () => Array.from(resources._cache.entries()).filter(([k,r]) => !k.match(/\.[2-9]\d*?$/) && !k.match(/^https?:/) && r?.baseTexture);

	let tex = 0;
	const spr = new this.PIXI.Sprite();
	spr.anchor.x = 0.5;
	spr.anchor.y = 1.0;
	this.scene.container.addChild(spr);
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		tex += d;
		const ts = textures();
		if (tex < 0) tex = ts.length - 1;
		tex %= ts.length;
		console.log(ts[tex][0]);
		spr.texture = ts[tex][1];
	};
	const onMove = (event) => {
		const p = this.mousePos(event);
		spr.x = Math.floor(p.x);
		spr.y = Math.floor(p.y);
	};
	const placed = [];
	let flip = false;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			if (placed.length) {
				const p = placed.pop();
				this.remove(p);
			}
			return;
		}
		if (event.shiftKey) {
			flip = !flip;
			spr.scale.x = flip ? -1 : 1;
			return;
		}
		const p = this.mousePos(event);
		const prop = this.Prop({ texture: textures()[tex][0], x: Math.floor(p.x), y: Math.floor(p.y), flip });
		placed.push(prop);
		this.add(prop);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		spr.destroy();
		const str = placed.map(p => `this.Prop({ texture: '${p.spr.texture.textureCacheIds[1]}', x: ${Math.floor(p.transform.x)}, y: ${Math.floor(p.transform.y)}${p.spr.scale.x < 0 ? ', flip: true' : ''} }),`).join('\n');
		navigator.clipboard.writeText(str);
		console.log(str);
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[draw walls|
	if (!window.debugPhysics) window.debugPhysics=true;
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	let poly;

	const getPos = (event) => {
		const p = this.mousePos(event);
		return [Math.round(p.x),Math.round(p.y)];
	};
	const makePoly = () => {
		if (poly) {
			this.destroy(poly);
		}
		if (verts.length > 0) {
			poly = this.Poly({ verts: verts.flat() }, { plugin: { interactive: true }});
			// this.add(poly);
		} else {
			poly = null;
		}
	};

	const onMove = (event) => {
		if (event.ctrlKey) return;
		event.preventDefault();
		event.stopPropagation();
		verts.pop();
		verts.push(getPos(event));
		makePoly();
	};
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			verts.pop();
		} else {
			verts.push(getPos(event));
		}
		makePoly();
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('pointerup', () => {
			canvas.removeEventListener('pointermove', onMove);
		}, { once: true });
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		if (poly) {
			navigator.clipboard.writeText(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}] }),`);
			console.log(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}] }),`);
			this.scene.drop(poly);
		}
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[back|this.back()]]

::main
<<do
	this.sfx('voiceDefault');
	this.scrim(0, 3000);
	this.goto('close');
>>
