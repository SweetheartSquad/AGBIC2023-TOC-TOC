::start
// some info for if you want to mod it:
//
// basic syntax examples:
// 	::passage title
// 	[[basic link]]
// 	[[link with different label>passage title]]
// 	[[link with different action|this.something=true;this.goto('passage title');]]
// 	<<if this.something>><<elseif this.somethingElse>><<endif>>
// 	<<do this.something=true;>>
// 	<<print this.something>>
// 	>passage break
//
// js examples:
// 	this.goto('passage')
// 	this.show('texture', { duration, x, y, scale, animate, freq })
// 	this.scrim(amount, duration)
// 	this.tween(object, 'property', to, duration, from, ease)
// 	this.gameObject - npc/interrupt that triggered the dialog
// 	this.scene      - game scene
// 	this.voice      - audio to play as letters tick in
// 	this.ease       - easing functions
//
// game object stuff:
// 	this.Area(name, [objects])
// 	this.Npc({ passage, x, y )
// 	this.Goto({ area, x, y }, { x, y, width, height })
// 	this.Prop({ texture, x, y, alpha, scale, flip, blur, animate, offset })
// 	this.PropParallax({ texture, alpha, scale, flip, blur, mult, animate, offset }),
// 	this.Block({ x, y, width, height, type, radius })
// 	this.Poly({ x, y, width, verts })
// 	this.Interrupt({ passage, x, y, width, height })

<<if !this.started>>
<<do
	// save location on refresh when debugging
	if (this.debug && !window.debugUnload) {
		window.debugUnload = true;
		window.addEventListener('beforeunload', () => {
			// if (window.scene.strand.cleared) return;
			// window.scene.strand.savestate.area = window.scene.strand.scene.area;
			// window.scene.strand.savestate.x = window.scene.strand.scene.player.transform.x;
			// window.scene.strand.savestate.y = window.scene.strand.scene.player.transform.y;
			// window.scene.strand.save();
		});
	}
	// middle mouse click to go back in debug
	if (this.debug && !window.debugBack) {
		window.debugBack = true;
		window.addEventListener('pointerdown', (event) => {
			if (event.button === 1) {
				window.scene.strand.back();
			}
		});
	}

	const PropParallaxAuto = (options) => {
		const start = Date.now();
		const gameObject = this.PropParallax(options);
		gameObject.scripts.push({
			gameObject,
			update() {
				gameObject.spr.tilePosition.x = (Date.now()-start)/1000 * options.speed;
			},
		});
		return gameObject;
	};

	this.Area('empty', []);
	this.Area('intro', [
		...([
			'gnome puzzle',
			'dustbun heist',
			'mouse town center',
		].flatMap((i, idx) => [
			this.Prop({ texture: 'glow', x: 80, y: -225 + 50*idx + 50 }),
			this.Text(i, { x: 80, y: -225 + 50*idx }),
			this.Goto({ area: i, y: -100 }, { x: 80, y: -200 + 50*idx, width: 80, height: 50 }),
		])),
	]);

	const rays = () => {
		let slGodRay = this.Prop({ texture: 'godRayL', offset: 1000000 });
		let scGodRay = this.Prop({ texture: 'godRayC', offset: 1000000 });
		let srGodRay = this.Prop({ texture: 'godRayR', offset: 1000000 });
		return [
			slGodRay,
			scGodRay,
			srGodRay,
			this.Updater(() => {
				slGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 1.0)*0.1 + 0.25;
				scGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 0.5)*0.1 + 0.25;
				srGodRay.display.container.alpha = Math.sin(game.app.ticker.lastTime*0.0015 + 0.0)*0.1 + 0.25;
			}),
		];
	};

	const Rockspot = ({ spot, x, y }) => {
		const h = this.Hotspot({ label: 'spot', texture: 'stone_tile', offset: -100, x, y, use: {
			undefined: [`p:"looks like something could go here"`],
			'big rock': ['goto:place big rock'],
			'medium rock': ['goto:place medium rock'],
			'little rock': ['goto:place little rock'],
		}, });
		h.spot = spot;
		return h;
	};

	this.flamingoMouthPoly = this.Poly({ verts: [37,-319, 18,-261, 40,-234, 75,-257, 131,-264, 209,-272, 239,-286] });
	this.Area('gnome puzzle', [
		// border
		this.Poly({ verts: [205,-275, 17,-290, -90,-287, -217,-247, -292,-175, -328,-93, -296,-38, -121,-14, 93,-11, 238,-55, 253,-98, 268,-184, 242,-238, 201,-276] }),
		this.flamingoMouthPoly,

		this.Prop({ texture: 'bg_gnome_puzzle_open_BACK', offset: -1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_FORE', offset: 1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_closed_BACK', offset: -1000000 }),
		this.Prop({ texture: 'bg_gnome_puzzle_worm_gone', x: -303, y: -182, offset: 0 }),
		this.Hotspot({ label: 'worm', texture: 'bg_gnome_puzzle_worm', x: -286, y: -159, offset: 0, use: {
			hat: ['goto:worm hat'],
			undefined: [`"wish i had a hat to go out in."`, `"i wanna look good before i head out"`],
			die: [`"i dont have hands..."`],
		}, }),

		this.Hotspot({ label: 'flower', texture: 'bg_gnome_puzzle_flower', x: -57, y: -266, offset: -10, use: {
			glass: ['goto:cut flower'],
			undefined: ['cute flower!'],
		}, }),

		this.Hotspot({ label: 'leaf', texture: 'leaf', x: 122, y: -175, offset: 10, use: {
			undefined: ['goto:move leaf'],
		}, }),
		
		this.Npc({ name: 'top', body: 'gnome_top', tint: 0xcd836f, x: -162, y: -224, use: {
			'die': [`"no time for games!"`],
			'glass': [`"hey! watch where you swing that!"`],
			undefined: [`"i know where the rocks go!"`,`"don't listen to the other guy."`, `"we'll never get into the temple..."`, `"ugh, that worm creeps me out..."`],
		}, }),
		this.Npc({ name: 'bottom', body: 'gnome_bottom', tint: 0x6f79cd, x: 180, y: -100, flip: true, use: {
			'cut flower': [`goto:remove-hat`],
			'die': [`"don't wanna play dice right now."`],
			'thimble': [`"cute hat! too big for me though..."`],
			'glass': [`"careful with that thing!!"`],
			'safety pin': [`"hmm, not really a hat..."`],
			undefined: [`"he won't put his rock on that tile!"`,`"I'M the one who knows the solution!"`,`"i hope there's a cute hat in there..."`],
		}, }),

		this.Item({ texture: 'big rock', x: -109, y: -219, use: {
			undefined: ['goto:take big rock'],
			player: [`"it's a rock"`],
		}, }),
		this.Item({ texture: 'little rock', x: 100, y: -110, use: {
			undefined: ['goto:take little rock'],
			player: [`"it's a rock"`],
		}, }),
		this.glassPoly = this.Poly({ verts: [-179,-82, -209,-84, -205,-66, -179,-84], width: 10 }),
		this.Item({ texture: 'glass', x: -190, y: -50, offset: -35, use: {
			player: [`"it's a piece of glass"`],
		}, }),

		//junk
		this.Item({ texture: 'thimble', x: 290, y: -20, offset: 10000000, use: {
			player: [`"it's a thimble"`],
		}, }),
		this.Item({ texture: 'die', x: -304, y: -103, offset: 100000000, use: {
			player: [`"it's a six-sided die"`],
		}, }),
		this.Item({ texture: 'safety pin', x: 50, y: -50, offset: -35, use: {
			player: [`"it's a safety pin"`],
		}, }),
		this.Hotspot({ label: 'dragonfly', texture: 'dragonfly', x: 261, y:-290, offset: 100000000, use: {
			undefined: ['what a pretty dragonfly...'],
		}, }),
		
		
		
		
		Rockspot({ spot: '11', x: -110, y: -125, }),
		Rockspot({ spot: '12', x: -64,  y: -149, }),
		Rockspot({ spot: '13', x: -25,  y: -171, }),
		Rockspot({ spot: '21', x: -67,  y: -97, }),
		Rockspot({ spot: '22', x: -23,  y: -121, }),
		Rockspot({ spot: '23', x: 23,   y: -146, }),
		Rockspot({ spot: '31', x: -20,  y: -69, }),
		Rockspot({ spot: '32', x: 27,   y: -95, }),
		Rockspot({ spot: '33', x: 70,   y: -120, }),
	]);

	this.Area('tomato', [
		this.Prop({ texture: 'tomatoRoom', offset: -1000000 }),
		this.Hotspot({ label: 'moon-dried tomato', texture: 'tomatoItem', x: 119, y: -341, use: {
			undefined: ['goto:moon-dried tomato'],
		} }),
		...rays(),
	]);

	this.HookItem = (props) => {
		const i = this.Item({ ...props, offset: 100000 - props.hookY });
		i.display.container.pivot.y = -props.hookY;
		i.hookY = props.hookY;
		i.scripts.push({
			gameObject: i,
			update() {
				this.gameObject.spr.scale.x = Math.abs(this.gameObject.spr.scale.x) * ((this.gameObject.transform.x > 0 && this.gameObject.transform.x < 290) ? 1 : -1);
			},
		});
		return i;
	};

	this.HookSpot = (props, item) => {
		const h = this.Hotspot({ texture: 'hook', x: props.x, y: props.y, offset: 100000, use: {
			undefined: [`p:"it's hook on the wall"`, `p:"looks like it could hold something"`, `p:"there's a bunch of these hooks here"`],
			'cowboy hat': ['goto:place on hook'],
			'poster': ['goto:place on hook'],
			'horseshoe': ['goto:place on hook'],
			'rope': ['goto:place on hook'],
			'wheel': ['goto:place on hook'],
			other: [`p:"i don't see how to hook it up"`],
		}, });
		h.display.container.pivot.y = -15;
		h.spot = props.spot;
		h.scripts.push({
			gameObject: h,
			update() {
				this.gameObject.spr.scale.x = Math.abs(this.gameObject.spr.scale.x) * ((this.gameObject.transform.x > 0 && this.gameObject.transform.x < 290) ? 1 : -1);
			},
		});
		if (item) {
			h.item = item.name;
			item.transform.x = h.transform.x;
			item.transform.y = h.transform.y;
			item.hookspot = h;
			h.btn.enabled = false;
			return [h, item];
		}
		return [h];
	};

	this.Area('dustbun heist', [
		// main walls
		this.Poly({ verts: [-247,-132, -74,-239, 58,-241, 162,-283, 348,-153, -2,-4, -249,-122] }),

		this.Prop({ texture: 'heist_bg', offset: -1000000 }),
		this.Prop({ texture: 'heist_vault', x: -212, y: -84, offset: -168 }),
		this.Prop({ texture: 'heist_window', x: 0, y: -211, offset: -66 }),
		this.Prop({ texture: 'heist_tubes', x: 237, y: -198, offset: -40 }),
		this.Prop({ texture: 'chandelier', x: -94, y: -320, offset: 1000 }),
		this.Poly({ verts: [-214,-117, -193,-140] }), // tnt
		this.Hotspot({ texture: 'tnt', x: -202, y: -109, offset: -25, use: {
			undefined: [`p:"are they gonna blow the door?"`, `p:"high-power explosives really change a room's energy"`, `p:"i'm having a blast, how about you?"`, `p:"...sorry, that one was a dud"`],
			candle: [`p:"um!!! bad idea"`, `p:"i'd rather not blow up!!"`, `p:"if only there was a way to do that remotely..."`],
			oil: [`p:"tnt doesn't need more grease"`],
			rope: [`p:"that's what the fuse is for"`],
			'cowboy hat': [`p:"it's out of style to wear a hat with bangs"`],
			'bread slice': [`p:"there are better ways to make toast"`],
		}, }),
		this.Prop({ texture: 'fuse', x: -146, y: -80, offset: -60 }),
		this.Hotspot({ label: 'fuse', texture: 'spark', freq: 1/50, alpha: 0, x: -73, y: -80, offset: -5, use: {
			undefined: [`p:"it's a fuse"`, `p:"it's definitely a fuse"`, `p:"i'm not confused"`, `p:"...my fuse is shorter than this"`],
			candle: ['goto:light fuse'],
			oil: [`p:"i dunno if that would make it burn better or worse"`, `p:"either way, not gonna try it"`],
			rope: [`p:"i think the fuse is long enough"`],
			other: [`p:"that's not gonna light it"`, `p:"fusing those won't do anything"`],
		}, }),

		this.Poly({ verts: [221,-114, 253,-120, 233,-133] }), // oil
		this.Item({ texture: 'oil', x: 235, y: -114, offset: 0, use: {
			player: [`p:"smells like... paint thinner?"`, `p:"really hope i don't run into a snake"`],
			undefined: ['goto:take oil'],
			other: [`goto:use on oil`],
			otherTarget: [`p:"that doesn't need oiling"`],
		}, }),

		this.Hotspot({ label: 'trophy mount', texture: 'beetle', x: 184, y: -317, use: {
			undefined: [`p:"gross..."`, `p:"there's a little plaque near the bottom"`, `p:"says 'Megasoma Elephas'"`],
			candle: [`p:"bit late for a pyre"`],
			'cowboy hat': [`p:"the horn would get in the way"`],
			rope: [`p:"someone already caught it"`],
			horseshoe: [`p:"it'd need feet for that"`],
		}, }),

		this.Hotspot({ texture: 'peanut', x: 168, y: -239, offset: -5, use: {
			undefined: [`p:"that's a lotta nut!"`, `p:"it is a peanut"`, `p:"it looks kinda mushy..."`],
			candle: [`p:"a hot nut never helped anyone"`],
			rope: [`p:"why would i tie up someone's nut?"`],
			wheel: [`p:"maybe a whole wagon could crush it... oh well"`],
			horseshoe: [`p:"i'm not heavy enough to just step on it"`],
		}, }),

		this.Poly({ verts: [-44,-39, 18,-13] }), // shelf
		this.Prop({ texture: 'shelf', y: -11, offset: 9000 + 11 }),
		this.Hotspot({ texture: 'bread', x: -30, y: -100, offset: 10000, use: {
			undefined: [`p:"it's a bread box"`, `p:"it's shut tight"`, `p:"i thought this was a bank, not a bakery..."`],
			other: [`p:"that won't help get that bread"`],
		}, }),

		this.Hotspot({ label: 'vault', texture: 'heist_vault_door', x: -170, y: -152, offset: -75, use: {
			undefined: ['goto:open vault'],
			oil: ['goto:oil vault'],
			wheel: [`p:"yep. they're both circles."`, `p:"i see zero other connection here"`],
			candle: [`p:"it'd need to be much hotter to burn that"`],
			other: [`p:"that's not gonna open it"`],
		}, }),

		this.Npc({ name: 'snake oil\nsalesbun', body: 'dustbun_oil', tint: 0x746568, x: 290, y: -130, shadow: false, flip: true, use: {
			undefined: [`"can't believe dis..."`, `"past lunch already..."`, `"s'posed to be makin' deals today"`, `"got me waitin' on steals..."`],
			'bread slice': ['goto:give bread'],
			poster: [`"dat reward's nuddin ta sneeze at"`, `"nah... let da sheriff deal with dat"`],
			candle: [`"ey watch it, dat's hot!!"`],
			rope: [`p:"they probably wouldn't appreciate being tied up"`],
			'cowboy hat': [`"no thanks, i prefer oiling my tufts up"`],
			other: [`"get outta here with dat junk!"`, `"dis trash ain't worth dust..."`, `"more trash? where's da dough?!"`],
		}, }),
		this.Npc({ name: 'scared hare', body: 'dustbun_scared', tint: 0x746568, x: -30, y: -215, flip: true, use: {
			other: [`"oh golly gee oh no oh no"`, `"ohh dear betsy buggy sue protect me"`, `"ohhhhh nooooo"`, `p:"...they seem a bit pre-occupied"`],
		}, }),
		this.Npc({ name: 'crook', body: 'dustbun_boss', tint: 0x9485A2, x: 125, y: -215, flip: true, use: {
			undefined: [`"if dat vault ain't open on da count of five..."`, `"one..."`, `"two..."`, `"tree....."`, `"fohhh......."`, `"...you tink ahm kiddin' around!?"`, `"ah won't say it again!"`],
			poster: [`"not a bad likeness"`, `"gonna try ta claim dat reward?"`, `"hehehe, don't make me laugh"`],
			rope: [`p:"i think they'd overpower me..."`, `p:"better knot risk it"`],
			'cowboy hat': [`"'preciate da gesture, but not mah colour"`],
			candle: [`"pa never tell ya not ta play with fire?"`, `"mine neither, heh"`],
			oil: [`"gotta respect da classics"`, `"ah go for bigger scores dese days"`],
			'bread slice': [`"no thanks, ah ate before we came"`, `"nevah do a heist on an empty stomach"`],
		}, }),
		this.Npc({ name: 'mook', body: 'dustbun_mook2', tint: 0xE6E2A4, x: -139, y: -115, use: {
			undefined: [`"ey step back kiddo"`, `"dis stuff's dangerous"`],
			rope: [`p:"i think they'd overpower me..."`, `p:"better knot risk it"`],
			'cowboy hat': [`"hats're more da boss's style"`],
			candle: [`"uh. c-careful with dat."`, `"s-seriously..."`],
			'bread slice': [`"da boss don't let me eat on da job"`],
			poster: [`"how come da boss gets all da credit..."`],
		}, }),
		this.Npc({ name: 'teller', body: 'dustbun_shop', tint: 0xC6A89D, shadow: false, offset: -100, x: 94, y: -247, use: {
			undefined: [`"i told ya, da door's stuck!"`, `"already unlocked, nuddin else ta do!"`, `"arghh won't anybunny help me??"`],
			other: [`p:"nah, they're pretty locked up in there"`],
		}, }),

		this.Hotspot({ texture: 'ladder', x: 45, y: -36, offset: 1000, use: {
			undefined: [`p:"a rickety, rotten ladder"`, `"i'm not gonna step on that"`],
			rope: [`p:"that's not how you make a rope ladder"`],
			other: [`p:"that won't work... i gotta step it up"`],
		}, }),

		...this.HookSpot({ spot: 'r1', x: 45, y: -144 },
			// empty
		),
		...this.HookSpot({ spot: 'r2', x: 177, y: -190 },
			this.HookItem({ texture: 'rope', hookY: 128, use: {
				player: [`p:"nice rope"`, `p:"probably strong enough for a tightrope act"`, `p:"it's rope"`],
				'cowboy hat': [`p:"just missing the cow"`],
				candle: [`p:"bit overkill for a wick"`],
				horseshoe: [`p:"those shoes don't need laces"`],
				wheel: [`p:"uhh... reel wope? no, that's nothing"`],
			}, }),
		),
		...this.HookSpot({ spot: 'r3', x: 287, y: -231 },
			this.HookItem({ texture: 'horseshoe', hookY: 30, use: {
				player: [`p:"do they even have horses here?"`, `p:"it's a lucky horseshoe!"`],
				rope: [`p:"those shoes don't need laces"`],
				other: [`p:"nah, might be bad luck"`],
				otherTarget: [`p:"nah, might be bad luck"`],
			}, }),
		),
		...this.HookSpot({ spot: 'r4', x: 299, y: -335 },
			this.HookItem({ texture: 'poster', hookY: 37, use: {
				player: [`p:"says 'WANTED - REWARD 100 BARS'"`, `p:"now where have i seen that face before..."`],
				candle: [`p:"got a feeling that would also be a crime"`],
			}, }),
		),
		...this.HookSpot({ spot: 'l1', x: -33, y: -209 },
			this.HookItem({ texture: 'wheel', hookY: 103, use: {
				player: [`p:"it's a big ol' wheel"`],
				rope: [`p:"uhh... reel wope? no, that's nothing"`],
				otherTarget: [`p:"that wheely won't work"`, `p:"try again, i'm on a roll"`, `p:"feel like i'm going in circles with this idea"`],
			}, }),
		),
		...this.HookSpot({ spot: 'l2', x: -132, y: -250 },
			// empty
		),
		...this.HookSpot({ spot: 'l3', x: -259, y: -298 },
			this.HookItem({ texture: 'cowboy hat', hookY: 58, use: {
				player: [`p:"yeehaw"`, `p:"oh it doesn't fit me... yeenaw"`],
				rope: [`p:"just missing the cow"`],
			}, }),
		),

		this.mite = this.Npc({ name: 'dust mite', body: 'mite', x: 3, y: -448, roam: 50, offset: 90000, bodyCollision: { isStatic: false, isSensor: true }, use: {
			undefined: ['goto:mite run'],
			other: [`p:"it seems content to ignore that"`, `p:"got its own priorities"`, `p:"it doesn't get it"`],
		}, }),

		this.Prop({ texture: 'heist_fg', offset: 10000 }),
	]);

	this.Area('soap', [
		this.Prop({ texture: 'noItemSoap', offset: -1000000 }),
		this.Hotspot({ label: 'soap', texture: 'soapItem', x: 54, y: -304, use: {
			undefined: ['goto:soap'],
		} }),
		...rays(),
	]);

	this.Area('mouse town center', [
		this.Poly({ verts: [349,-265, -23,-499, -350,-301, -350,15, 350,15, 350,-266] }), // walls

		this.Prop({ texture: 'bg',                  offset: -1000000 }),
		this.Prop({ texture: 'buttons', x: 44, y: -339,        offset: -30 }),
		this.Poly({ verts: [-23,-472] }), // egg
		this.Item({ texture: 'easter egg', x: -23, y: -463,          offset: -10 }),
		this.Poly({ verts: [-24,-105, 42,-111], width: 5, }), // knife
		this.Prop({ texture: 'butter knife', x: 66, y: -94,        offset: -30 }),
		this.Poly({ verts: [-337,-45, -255,-26, -291,-5], width: 7 }), // chapstick
		this.Prop({ texture: 'chapstick', x: -284, y: -10,     offset: -10 }),
		this.Poly({ verts: [15,-390, 4,-395, 15,-398, 24,-395, 16,-390] }), // bottle cap
		this.Item({ texture: 'bottle cap', x: 15, y: -378,     offset: -10 }),

		this.Interrupt({ passage: 'gatehouse reject', type: 'poly', verts: [84,-324, 141,-283, 178,-298, 236,-342, 162,-384] }),
		this.Poly({ verts: [286,-306, 221,-271, 172,-299, 237,-345, 166,-385, 98,-347, 39,-382, 111,-423] }), // gate
		this.Prop({ texture: 'gatehouse', x: 164, y: -259,        offset: -120 }),
		this.Prop({ texture: 'pushPins', x: 62, y: -420,          offset: 41 }),
		this.Poly({ verts: [258,-268, 293,-282], width: 10 }), // toothpicks
		this.Item({ texture: 'toothpicks', x: 273, y: -247,    offset: -87 }),
		this.Poly({ verts: [321,-245, 333,-245] }), // salt shaker
		this.Prop({ texture: 'salt shaker', x: 328, y: -232,        offset: -10 }),

		this.Block({ type: 'circle', x: -10, y: -435, radius: 2, }), // crayon SL
		this.Block({ type: 'circle', x: 311, y: -235, radius: 2, }), // crayon SR
		this.Prop({ texture: 'shelfCrayonSL', x: -9, y: -430,    offset: -4 }),
		this.Prop({ texture: 'shelfCrayonSR', x: 312, y: -230,    offset: -4 }),
		this.Prop({ texture: 'shelfBg', x: 157, y: -288,            offset: -0 }),
		this.Prop({ texture: 'pepper shaker', x: 192, y: -456,     offset: 200 }),
		this.Prop({ texture: 'pill bottle', x: 100, y: -437,     offset: 200 }),
		this.Item({ texture: 'pill', x: 151, y: -423,     offset: 200 }),


		this.Poly({ verts: [-105,-368, -56,-368], width: 55 }), // can
		this.Prop({ texture: 'can back', x: -83, y: -372,           offset: -10 }),
		this.Prop({ texture: 'can front', x: -81, y: -334,          offset: -25 }),
		this.Item({ texture: 'key', x: -59, y: -354,       offset: 50 }),

		this.Poly({ verts: [12,-175, 54,-180, 80,-198, 87,-219, 78,-239, 54,-257, 20,-263, -13,-259, -39,-246, -57,-224, -50,-196, -26,-182, 8,-174] }), // fountain
		this.Poly({ verts: [-79,-199, 111,-234], width: 15 }), // altars
		this.Prop({ texture: 'fountainWater', x: 15, y: -164, freq: 1/100, offset: -45 }),
		this.Prop({ texture: 'fountainNoWater',   x: 15, y: -164, offset: -45 }),
		this.Hotspot({ label: 'left altar', texture: 'pizzaTableSL', x: -79, y: -189,      offset: -7 }),
		this.Hotspot({ label: 'right altar', texture: 'pizzaTableSR', x: 110, y: -222,      offset: -7 }),
		this.Prop({ texture: 'starAltar', x: 110, y: -237,         offset: 8 }),
		this.Prop({ texture: 'cheeseAltar', x: -80, y: -202,       offset: 6 }),

		this.Poly({ verts: [218,-166, 192,-184, 271,-237, 298,-218, 219,-166], width: 5 }), // matchbox
		this.Item({ texture: 'matchbox', x: 246, y: -161,         offset: -25, use: {
			matchbox: [`goto:light match`],
		}, }),

		this.Block({ type: 'circle', x: -219, y: -339, radius: 2, }), // candle green
		this.Block({ type: 'circle', x: -321, y: -278, radius: 2, }), // candle blue
		this.Block({ type: 'circle', x: -245, y: -229, radius: 2, }), // candle purple
		this.Block({ type: 'circle', x: -142, y: -292, radius: 2, }), // candle red
		this.Poly({ verts: [-184,-230, -119,-272, -149,-287, -218,-249, -185,-231], width: 5 }), // juicebox
		this.Prop({ texture: 'candleColumnBlue', x: -320, y: -272,  offset: -4 }),
		this.Prop({ texture: 'candleColumnGreen', x: -218, y: -335,      offset: -4 }),
		this.Prop({ texture: 'candleColumnPurple', x: -244, y: -225,     offset: -4 }),
		this.Prop({ texture: 'candleColumnRed', x: -142, y: -287,        offset: -4 }),
		this.Poly({ verts: [-212,-308, -260,-313, -292,-287], width: 14 }), // foil
		this.Item({ texture: 'foil', x: -253, y: -274,  offset: -25 }),
		this.Prop({ texture: 'juicebox', x: -168, y: -225,         offset: -47 }),
		this.Prop({ texture: 'candle foil top', x: -227, y: -300,   offset: 300 }),

		this.Prop({ texture: 'cheeseCart', x: -235, y: 0,  offset: -0 }),
		this.Prop({ texture: 'cheeseFloor', x: 300, y: -140,   offset: 0 }),
		this.Prop({ texture: 'horseNoKey', x: -128, y: 0,   offset: 0 }),
		this.Prop({ texture: 'horseWithKey', x: -128, y: 0,   offset: -0 }),

		this.Hotspot({ texture: 'birthday candles', x: -127, y: -288,        offset: 0 }),
		this.Hotspot({ texture: 'wax snowman', x: -103, y: -303,       offset: 0 }),
		this.Hotspot({ texture: 'wax star', x: -108, y: -302,          offset: 0 }),
		this.Hotspot({ texture: 'wax tree', x: -111, y: -305,          offset: 0 }),
		this.Hotspot({ texture: 'wax wad', x: -121, y: -298,           offset: 0 }),
		

		this.Prop({ texture: 'cutter snowman 1', x: 274, y: -102, alpha: 0, offset: 202 }),
		this.Prop({ texture: 'cutter star 1',    x: 274, y: -101, alpha: 1, offset: 201 }),
		this.Prop({ texture: 'cutter tree 1',    x: 279, y: -107, alpha: 0, offset: 207 }),
		this.Prop({ texture: 'cutter snowman 2', x: -298, y: -129, alpha: 1, offset: 129 }),
		this.Prop({ texture: 'cutter star 2',    x: -286, y: -126, alpha: 0, offset: 126 }),
		this.Prop({ texture: 'cutter tree 2',    x: -293, y: -129, alpha: 0, offset: 129 }),
		this.Prop({ texture: 'cutter snowman 3', x: 267, y: -300, alpha: 0, offset: 300 }),
		this.Prop({ texture: 'cutter star 3',    x: 281, y: -314, alpha: 0, offset: 314 }),
		this.Prop({ texture: 'cutter tree 3',    x: 268, y: -300, alpha: 1, offset: 300 }),
		(() => {
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: 311, y: -145, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
			}, });
			h.pos = 1;
			h.cookie = 'star';
			h.carrying = 'cutter star carrying';
			h.spr.width = 100;
			h.spr.height = 100;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: -314, y: -214, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
			}, });
			h.pos = 2;
			h.cookie = 'snowman';
			h.carrying = 'cutter snowman carrying';
			h.spr.width = 100;
			h.spr.height = 100;
			return h;
		})(),
		(() => {
			const h = this.Item({ label: 'cookie cutter', texture: 'blank', x: 299, y: -316, offset: 1000, use: {
				player: [`p:"it's a cookie cutter"`],
				'cookie cutter': ['goto:swap cutter'],
			}, });
			h.pos = 3;
			h.cookie = 'tree';
			h.carrying = 'cutter tree carrying';
			h.spr.width = 100;
			h.spr.height = 100;
			return h;
		})(),

		this.Poly({ verts: [348,-187, 37,7] }), // stove ledge
		this.Prop({ texture: 'stoveFloor', x: 175, y: 0, offset: 0 }),
		this.Prop({ texture: 'stoveHob', x: 310, y: 0,   offset: 0 }),
		this.Prop({ texture: 'spoonForkStoveProng', x: 218, y: 0,      offset: 0 }),
		this.Prop({ texture: 'anvilStoveProng', x: 306, y: -45,          offset: 45 }),

		this.Npc({ name: 'guard upper', body: 'mouse_guard_tall', x: 71, y: -302, flip: true, use: {}, }),
		this.Npc({ name: 'guard lower', body: 'mouse_guard_short', x: 170, y: -259, flip: true, use: {}, }),
		this.Npc({ name: 'can', body: 'mouse_basic', x: -78, y: -354, offset: -5, use: {}, }),
		this.Npc({ name: 'juicebox', body: 'mouse_basic', x: -207, y: -278, use: {}, }),
		this.Npc({ name: 'right', body: 'mouse_basic', x: 288, y: -170, flip: true, use: {}, }),
		this.Npc({ name: 'bottom', body: 'mouse_basic', x: 153, y: -57, flip: true, offset: 100, use: {}, }),
		
		this.Npc({ name: 'cheese farmer', body: 'mouse_nervous', x: -192, y: -172, bodyCollision: { isStatic: true },
			use: {
				undefined: [`"my horse.."`, `"it won't go..."`],
				'wind-up key': [`"that looks familiar.."`, `"i know this..."`],
				'appley slice': [`"no thanks... i saw you pick that up off the ground"`],
			},
		}),
		this.Npc({ name: 'sitting', body: 'mouse_sitting', offset: 1000, x: 200, y: -370, shadow: false, flip: true, use: {}, }),
	]);

	this.Area('sandwich', [
		// sandwich
		this.Poly({ verts: [26,-326, 109,-283, 166,-271, 224,-285, 261,-314, 259,-339, 214,-381, 135,-431, 54,-465, 6,-458, -30,-445, -56,-422, -56,-399, -33,-368, 25,-327] }),
		this.Prop({ texture: 'plateNoSandwhich', offset: -1000000 }),
		this.Hotspot({ label: 'half-eaten tuna fish sandwich', texture: 'sandwhich', x: 100, y: -261, offset: -100000, use: {
			undefined: ['sandwich'],
		} }),
		...rays(),
	]);



	this.shock = (target, duration = 500) => {
		const d = duration;
		const p = d * 0.02;
		const t1 = this.tween(target.spr, 'y', 0, d, -20, t => 1-Math.abs(Math.cos(t*p))*(1-t));
		const t2 = this.tween(target.spr, 'angle', 0, d, -10, t => 1-Math.cos(t*p)*(1-t));
		return [t1, t2];
	};


	this.gotoItemRoom = async (pos, area) => {
		this.scrim(1, 400);
		this.scene.player.walkBy(pos.x, pos.y);
		await this.delay(500);
		this.scene.goto({ area, x: -277 - 100, y: -108 + 100 });
		this.scrim(0, 1500);
		this.scene.player.walkTo(-277, -108);
		await this.delay(1600);
		this.goto('close');
	};


	// start
	this.started=true;
	this.scene.goto({ area: 'intro' });
	requestAnimationFrame(() => {
		this.scrim(1, 3000);
	});
>>
<<endif>>
<<do
	this.scene.dialogue.textText.style.fill = 0xffd20a;
	this.show('title2', { scale: 2, duration: 0 });
	this.scene.dialogue.textText.x = this.size.x / 2;
	this.scene.dialogue.textText.y = this.size.y / 2;
>>
TOC TOC
>start
<<do
	this.scene.dialogue.textText.style.fill = 0xffffff;
	// this.music('bgm');
	this.show('').then(() => {this.goto('start2')});
>>

::start2
<<do
	this.tween(this.scene.border.display.container, 'alpha', 1, 1000);
	this.goto('main');
>>

::close
this should never render

::choiceDefault
continue

::me
me

::generic item
<<do this.gameObject.pickup(); this.goto('close')>>

::generic use
<<do this.gameObject = this.scene.player; this.scene.loseItem();>>
<<print this.shuffle([
	`"i don't think that will work"`,
	`"i don't know about that..."`,
	`"nah"`,
])[0]>>
[[>close]]



// .d8888b. 88d888b. .d8888b. 88d8b.d8b. .d8888b.
// 88'  `88 88'  `88 88'  `88 88'`88'`88 88ooood8
// 88.  .88 88    88 88.  .88 88  88  88 88.  ...
// `8888P88 dP    dP `88888P' dP  dP  dP `88888P'
//      .88
//  d8888P
::cut flower
<<do 
	this.scene.loseItem(true);
	this.destroy(this.gameObject);
	this.destroy(this.glassPoly);
	this.gameObject = this.scene.player;

	const cutFlower = this.Item({ label: 'cut flower', texture: 'flower_head', x: -55, y: -321, offset: 0, use: {
		player: [`p:"it's a flower"`],
	}, });
	cutFlower.btn.enabled = false;
	this.tween(this.scene.screenFilter.uniforms, 'whiteout', 0, 200, 0.5, this.ease.cubicOut);
	this.tween(cutFlower.transform, 'y', -266, 2000, -321, this.ease.backIn);
	this.tween(cutFlower.transform, 'x', -25, 2000, -55, (t) => this.ease.sineInOut(t) + this.ease.sineInOut(t*4));
	this.tween(cutFlower.spr, 'angle', 0, 2000, 30, (t) => this.ease.sineInOut(t) + this.ease.sineInOut(t*4));
	this.add(
		this.Prop({ texture: 'bg_gnome_puzzle_flower_gone', x: -58, y: -266, offset: -10 }),
		cutFlower,
	);
	setTimeout(() => {
		cutFlower.btn.enabled = true;
	}, 2000);
>>
"snip snip!"
[[>close]]

::move leaf
<<do
	this.gameObject.btn.enabled = false;
	this.add(
		this.Item({ texture: 'medium rock', x: 132, y: -185, use: {
			player: [`"it's a rock"`],
		}, }),
	);
	this.tween(this.gameObject.transform, 'x', this.gameObject.transform.x + 100, 500, undefined, this.ease.cubicInOut);
	this.gameObject = this.scene.player;
>>
"oh! a rock!"
[[>close]]

::take big rock
<<if this.scene.find('worm').display.container.alpha <= 0>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('top')>>
"hands off my rock!!"
[[>close]]
<<endif>>

::take little rock
<<if this.scene.find('bottom').expression === 'hatless'>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('bottom')>>
"hey! that's my rock ya jerk."
[[>close]]
<<endif>>

::remove-hat
"oh, this is so pretty! thank you!"
>
<<do
	this.scene.loseItem(true);
	this.gameObject.expression = 'hatless';
	const spr = new this.PIXI.Sprite(this.tex('flower_head'));
	spr.anchor.x = spr.anchor.y = 0.5;
	spr.scale.x = spr.scale.y = 0.5;
	spr.scale.x *= -1;
	spr.y -= 74;
	spr.x = 5;
	this.scene.find('bottom').spr.addChild(spr);
	this.shock(this.scene.find('bottom'), 300);

	this.add(
		this.Item({ texture: 'hat', x: 128, y: -83, tint: 0x6f79cd, use: {
			player: ['p:"it is a gnome hat"'],
		}, }),
	);
>>
"guess i don't need this anymore"
[[>close]]

::worm hat
<<do
	this.scene.loseItem(true);
	this.add(
		this.Prop({ texture: 'hat', x: -250, y: -180, tint: 0x6f79cd, offset: 50, }),
	);
>>
"for me? thanks buddy"
>
"now i can go out and look cute..."
>
<<do
	const hat = this.scene.find('hat');
	const worm = this.scene.find('worm');
	this.tween(hat.display.container, 'alpha', 0, 1000);
	this.tween(worm.display.container, 'alpha', 0, 1000);
	worm.btn.enabled = false;
>>
"peace"
[[>close]]

::place big rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('big rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::place medium rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('medium rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::place little rock
<<do this.spot = this.gameObject; this.rock = this.scene.find('little rock');this.goto(this.gameObject.rock ? 'rock occupied' : 'place rock');>>

::rock occupied
<<do this.scene.loseItem(); >>
<<do this.gameObject = this.scene.player>>
<<if this.spot.rock === this.rock>>
"i already put it there"
<<else>>
"there's already a rock there"
<<endif>>
[[>close]]

::place rock
<<do
	const oldSpot = this.scene.findAll('spot').find(i => i.rock === this.rock);
	if (oldSpot) oldSpot.rock = undefined;
	this.spot.rock = this.rock;
	this.scene.loseItem();
	this.rock.transform.x = this.spot.transform.x;
	this.rock.transform.y = this.spot.transform.y - 20;
>>
<<do this.gameObject = this.scene.player>>
"how about this?"
>
<<do this.gameObject = this.scene.find('top'); this.shock(this.gameObject, 250);>>
<<if ['11','12','13'].includes(this.spot.spot)>>
"<<print this.shuffle(['yes!', 'absolutely!'])[0]>>"
<<else>>
"<<print this.shuffle(['no way!', 'nuh uh!'])[0]>>"
<<endif>>
>
<<do this.gameObject = this.scene.find('bottom'); this.shock(this.gameObject, 250);>>
<<if ['21','22','23'].includes(this.spot.spot)>>
"<<print this.shuffle(['right!', 'correct!'])[0]>>"
<<else>>
"<<print this.shuffle(['wrong!', 'incorrect!'])[0]>>"
<<endif>>
<<if this.scene.findAll('spot').filter(i => i.rock).map(i => i.spot).sort().join(',') === '31,32,33'>>
[[>rock solved]]
<<else>>
[[>close]]
<<endif>>

::rock solved
<<do
	this.scene.findAll('spot').forEach(i => { i.btn.enabled = false; });
	this.scene.camera.shake = 2;
	this.tween(this.scene.screenFilter.uniforms, 'whiteout', 0, 200, 1, this.ease.cubicOut);
	this.tween(this.scene.camera, 'shake', 0, 1500, 2, this.ease.cubicIn);
	this.tween(this.scene.find('bg_gnome_puzzle_closed_BACK').display.container, 'alpha', 0, 1000);

	this.destroy(this.flamingoMouthPoly);
	this.scene.drop(
		this.Poly({ verts: [18,-292, 13,-263, 35,-234, 60,-263, 166,-324, 187,-237, 216,-166, 212,-247] }),
	);

	setTimeout(() => {
		this.goto('rock solved1');
	}, 2000);
	setTimeout(() => {
		this.scene.strand.shock(this.scene.find('top'), 1500);
	}, 60);
	setTimeout(() => {
		this.scene.strand.shock(this.scene.find('bottom'), 1500);
	}, 120);
>>
::rock solved1
<<do
	const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: 134, y: -240, use: {
		undefined: [`goto:goto tomato`],
	}, });
	h.spr.width = 100;
	h.spr.height = 100;
	this.add(h);
>>
"you opened the temple!"
>
"incredible..."
[[>close]]

::goto tomato
<<do this.gotoItemRoom({ x: 125, y: -240 }, 'tomato');>>

::moon-dried tomato
you got the moon-dried tomato.
>
<<do
	this.scene.goto({ area: 'dustbun heist', x: 50, y: -100 });
	this.goto('close');
>>



//       dP                     dP   dP
//       88                     88   88
// .d888b88 dP    dP .d8888b. d8888P 88d888b. dP    dP 88d888b.
// 88'  `88 88    88 Y8ooooo.   88   88'  `88 88    88 88'  `88
// 88.  .88 88.  .88       88   88   88.  .88 88.  .88 88    88
// `88888P8 `88888P' `88888P'   dP   88Y8888' `88888P' dP    dP
::place on hook
<<do
	const item = this.scene.carrying;
	const spot = this.gameObject;
	item.hookspot.btn.enabled = true;
	item.hookspot.item = undefined;
	item.transform.x = spot.transform.x;
	item.transform.y = spot.transform.y;
	item.display.container.offset = spot.spot === 'r4' ? 0 : 100000 - item.hookY;
	item.hookspot = spot;
	spot.item = item.name;
	spot.btn.enabled = false;
	this.scene.loseItem();
	this.goto('close');
>>

::mite run
<<do
	this.resetMite = async () => {
		this.tween(this.mite.display.container, 'alpha', 0, 400);
		this.mite.walkBy(0, 1000);
		await this.delay(500);
		this.mite.display.container.offset = 90000;
		this.mite.setPosition(3, -448-50);
		this.tween(this.mite.display.container, 'alpha', 1, 1000, 0, this.ease.cubicOut);
		await this.mite.walkTo(3, -448);
		this.mite.roam.range = [0, 50];
	};

	const middleBeamUpper = [5, -380];
	const middleBeamLower = [5, -126];
	const rightBeamLower = [335, -250];
	const rightBeamUpper = [333, -310];
	const beetleHook = [184, -383];
	const pastWall = [57, -447];
	const middleBeamCenter = [3, -193];
	const chandelierHook = [-305, -368];

	const isRope = (spot) => {
		return spot.item === 'rope';
	};
	const ropeExit = () => {
		// TODO: rope sfx
		this.tween(this.scene.find('rope').display.container.scale, 'y', 1, 250, 1.1, t => 1-Math.cos(t*250*0.02)*(1-t));
		this.resetMite();
		this.camPoint = undefined;
		this.goto('close');
	};
	const isWheel = (spot) => {
		return spot.item === 'wheel';
	};
	const wheelExit = async (...spots) => {
		// TODO: wheel sfx
		this.tween(this.scene.find('wheel').display.container, 'angle', 0, 250, -10, t => 1-Math.cos(t*250*0.02)*(1-t));
		await spots.reduce(async (p, spot) => {
			await p;
			await this.mite.walkTo(...(spot.transform ? [spot.transform.x, spot.transform.y] : spot));
		}, Promise.resolve());
		this.resetMite();
		this.camPoint = undefined;
		this.goto('close');
	};

	(async () => {
		this.camPoint = this.mite.transform;
		await this.mite.walkTo(...middleBeamUpper);
		await this.delay(200);

		const hookspots = this.scene.findAll('hook').reduce((acc, i) => {
			acc[i.spot] = i;
			return acc;
		}, {});

		if (!hookspots.r1.item || isWheel(hookspots.l1)) { // right branch
			await this.mite.walkTo(...middleBeamLower);
			await this.delay(200);
			await this.mite.walkTo(hookspots.r1.transform.x, hookspots.r1.transform.y);
			if (isRope(hookspots.r1)) return ropeExit();
			if (isWheel(hookspots.r1)) return wheelExit(middleBeamLower);
			await this.mite.walkTo(hookspots.r2.transform.x, hookspots.r2.transform.y);
			if (isRope(hookspots.r2)) return ropeExit();
			if (isWheel(hookspots.r2)) return wheelExit(hookspots.r1, middleBeamLower);
			await this.mite.walkTo(hookspots.r3.transform.x, hookspots.r3.transform.y);
			if (isRope(hookspots.r3)) return ropeExit();
			if (isWheel(hookspots.r3)) return wheelExit(hookspots.r2, hookspots.r1, middleBeamLower);
			await this.mite.walkTo(...rightBeamLower);
			this.mite.display.container.offset = 0;
			await this.mite.walkTo(...rightBeamUpper);
			await this.mite.walkTo(hookspots.r4.transform.x, hookspots.r4.transform.y);
			if (isRope(hookspots.r4)) return ropeExit();
			if (isWheel(hookspots.r4)) return wheelExit(rightBeamUpper);
			await this.mite.walkTo(...beetleHook);
			if (!this.smashedPeanut) {
				this.smashedPeanut = true;
				this.goto('smash peanut');
			} else {
				this.goto('smash peanut again');
			}
			await this.mite.walkTo(...pastWall);
		} else { // left branch
			await this.mite.walkTo(...middleBeamCenter);
			await this.mite.walkTo(hookspots.l1.transform.x, hookspots.l1.transform.y);
			if (isRope(hookspots.l1)) { // bread branch
				// TODO: rope sfx
				this.tween(this.scene.find('rope').display.container.scale, 'y', 1, 250, 1.1, t => 1-Math.cos(t*250*0.02)*(1-t));
				this.mite.display.container.offset = 9500;
				await this.mite.walkTo(-53, -116);
				if (!this.knockedBread) {
					this.knockedBread = true;
					this.goto('knock bread');
					await this.delay(500);
					await this.mite.walkTo(-11, -112);
					await this.delay(500);
				} else {
					await this.mite.walkTo(-11, -112);
					this.goto('knock bread again');
				}
				this.resetMite();
				return;
			}
			if (isWheel(hookspots.l1)) return wheelExit(middleBeamCenter);
			await this.mite.walkTo(hookspots.l2.transform.x, hookspots.l2.transform.y);
			if (isRope(hookspots.l2)) return ropeExit();
			if (isWheel(hookspots.l2)) return wheelExit(hookspots.l1, middleBeamCenter);
			await this.mite.walkTo(hookspots.l3.transform.x, hookspots.l3.transform.y);
			if (isRope(hookspots.l3)) return ropeExit();
			if (isWheel(hookspots.l3)) return wheelExit(hookspots.l2, hookspots.l1, middleBeamCenter);
			await this.mite.walkTo(...chandelierHook);
			await this.delay(500);
			if (this.scene.find('chandelier')) {
				this.goto('drop chandelier');
			} else {
				this.goto('drop chandelier again');
			};
		}
		this.resetMite();
	})();
>>

::drop chandelier
<<do
	const chandelier = this.scene.find('chandelier');
	this.camPoint = chandelier.transform;
	this.tween(chandelier.transform, 'x', chandelier.transform.x, 1200, chandelier.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		this.tween(chandelier.transform, 'y', chandelier.transform.y + 170, 400, undefined, this.ease.cubicIn);
		// TODO: chain sfx


		setTimeout(() => {
			this.scene.screenFilter.uniforms.whiteout = 1.0;
			this.tween(this.scene.screenFilter.uniforms, 'whiteout', 0, 200, undefined, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			this.destroy(chandelier);
			this.add(
				this.Item({ texture: 'candle', x: -53, y: -177, offset: 0, use: {
					player: [`p:"ouch! that's hot"`],
					rope: [`p:"bit overkill for a wick"`],
					poster: [`p:"got a feeling that would also be a crime"`],
				}, }),
				this.Prop({ texture: 'dropped chandelier', x: -92, y: -144, offset: -17 }),
			);
			this.scene.drop(
				this.Poly({ verts: [-78,-163, -111,-162] }),
			);
			// TODO: crash sfx

			this.goto('drop chandelier1');
		}, 400);
	}, 800);
>>
::drop chandelier1
<<do
	this.gameObject = this.scene.find('mook');
	this.shock(this.gameObject, 500);
	this.camPoint = undefined;
>>
"geez louwheeze!!"
>
"ya tryin' ta scare me ta death!?"
[[>close]]

::drop chandelier again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = null;
>>
"i don't think a chandelier can drop twice..."
[[>close]]

::light fuse
<<do
	this.scene.loseItem(true);
	this.scene.find('fuse');
	this.gameObject.spr.alpha = 1;
	this.gameObject.use.undefined = ['p:"must be one of those slow burning fuses"', 'p:"very, very slow burning..."'];
	this.gameObject.use.other = [`p:"fusing those won't do anything"`, `p:"it's already lit"`];
	this.gameObject.btn.resetCycles();
	// TODO: fuse sfx
	setTimeout(() => {
		this.goto('light fuse1');
	}, 1000);
>>
::light fuse1
<<do this.gameObject = this.scene.find('mook');>>
"uh..."
<<do
	const mook = this.scene.find('mook');
	(async () => {
		await this.delay(800);
		mook.flipped = true;
		this.shock(mook, 200);
		await this.delay(800);
		mook.flipped = false;
		this.shock(mook, 200);
		await this.delay(800);
		this.goto('light fuse2');
	})();
>>
::light fuse2
"i'm outta here!"
<<do
	const mook = this.scene.find('mook');
	(async () => {
		const [t1, t2] = this.shock(this.scene.find('mook'), 1200);

		await this.delay(1200-800);
		const t3 = this.tween(mook, 'x', 102, 800, undefined, this.ease.backIn);
		const t4 = this.tween(mook, 'y', -57, 800, undefined, this.ease.backIn);
		const t5 = this.tween(mook.display.container, 'alpha', 0, 800, undefined, this.ease.cubicIn);
		await this.delay(800);
		this.destroy(mook);
		this.tweenAbort(t1);
		this.tweenAbort(t2);
		this.tweenAbort(t3);
		this.tweenAbort(t4);
		this.tweenAbort(t5);
		this.gameObject = undefined;
		this.goto('close');
	})();
>>

::smash peanut
<<do
	const beetle = this.scene.find('trophy mount');
	this.camPoint = beetle.transform;
	this.tween(beetle.transform, 'x', beetle.transform.x, 1200, beetle.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		this.tween(beetle.transform, 'y', -247, 400, undefined, this.ease.cubicIn);
		// TODO: sfx?


		setTimeout(() => {
			this.scene.screenFilter.uniforms.whiteout = 1.0;
			this.tween(this.scene.screenFilter.uniforms, 'whiteout', 0, 200, undefined, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			beetle.btn.enabled = false;
			beetle.spr.angle = -10;
			// TODO: crash sfx
			this.destroy(this.scene.find('peanut'));
			this.add(
				this.gameObject = this.Hotspot({ label: 'peanut', texture: 'peanut smashed', x: 166, y: -228, offset: -15, use: {
					undefined: [`p:"it used to be a peanut"`, `p:"it looks very mushy..."`],
					'bread slice': ['goto:butter bread'],
					other: [`p:"i don't want to slather that in peanut"`],
				}, }),
			);

			this.goto('smash peanut2');
			this.camPoint = undefined;
		}, 400);
	}, 800);
>>

::smash peanut2
<<do
	const crook = this.scene.find('crook');
	crook.flipped = false;
	this.shock(crook, 500);
	const shop = this.scene.find('shop');
	this.shock(shop, 600);
	this.gameObject = shop;
>>
"gadzooks!!"
>
<<do
	this.gameObject = this.scene.find('crook');
	this.shock(this.gameObject, 250);
	this.gameObject.btn.use.undefined = [`"swear ah saw sumtin move over dere"`, `"back off kid, yer distractin' me"`];
	this.gameObject.btn.resetCycles();
>>
"this place is fallin' apart..."
>
"all da more reason to clean house"
[[>close]]

::smash peanut again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = undefined;
>>
"i don't think it likes peanuts"
[[>close]]


::knock bread
<<do
	const bread = this.scene.find('bread');
	this.tween(bread.transform, 'x', bread.transform.x, 1600, bread.transform.x + 10, (t) => 1-Math.random()*(1-t));
	// TODO: rumble sfx
	setTimeout(() => {
		bread.display.container.offset = 0;
		this.tween(bread.transform, 'y', bread.transform.y + 170, 400, undefined, this.ease.cubicIn);
		// TODO: chain sfx


		setTimeout(() => {
			this.scene.screenFilter.uniforms.whiteout = 1.0;
			this.tween(this.scene.screenFilter.uniforms, 'whiteout', 0, 200, undefined, this.ease.cubicOut);
			this.tween(this.scene.camera, 'shake', 0, 1000, 4, this.ease.cubicOut);
			this.destroy(bread);
			this.add(
				this.Prop({ texture: 'busted bread', x: -40, y: -27, offset: -17 }),
			);
			// TODO: crash sfx
			this.add(
				this.Item({ texture: 'bread slice', x: -74, y: -45, offset: -50, use: {
					player: [`p:"i'm not eating that"`, `p:"maybe someone else'll eat it though"`],
				}, }),
			);
			this.goto('close');
			this.camPoint = undefined;
		}, 400);
	}, 1200);

>>

::knock bread again
<<do
	this.gameObject = this.scene.player;
	this.camPoint = undefined;
>>
"don't think it wants anything else on that shelf"
[[>close]]

::butter bread
<<if !this.buttered>>
<<do
	this.buttered = true;
	this.scene.sprCarrying.texture = this.tex('bread slice buttered');
	const slice = this.scene.find('bread slice');
	slice.texture = 'bread slice buttered';
	slice.spr.texture = this.tex('bread slice buttered');
>>
*plaf* *smear* *plap* smush*
[[>close]]
<<else>>
<<do this.gameObject = this.scene.player>>
"i think it's peanutty enough"
[[>close]]
<<endif>>

::give bread
<<if this.buttered>>
"hm... well i am pretty hungry"
<<do
	this.fed = true;
	this.scene.loseItem(true);
>>
[[>give bread2]]
<<else>>
<<do this.scene.loseItem();>>
"bread? alone???"
[[>close]]
<<endif>>

::give bread2
*munch* *monch* *mounch* *muonch*
>
"yum yum"
>
"fine take my oil i don't care anymore"
[[>close]]


::take oil
<<if this.fed>>
<<do this.goto('generic item')>>
<<else>>
<<do this.gameObject = this.scene.find('snake oil\nsalesbun')>>
<<do this.goto('take oil hint')>>
<<endif>>

::use on oil
<<if this.fed>>
<<do this.gameObject = this.scene.player>>
<<do this.scene.loseItem()>>
"that doesn't need oiling"
[[>close]]
<<else>>
<<do this.gameObject = this.scene.find('snake oil\nsalesbun')>>
<<do this.scene.loseItem();>>
<<do this.goto('take oil hint')>>
<<endif>>

::take oil hint
<<do this.oilhint = ((this.oilhint || 3) + 1) % 3;>>
<<print [
	`"no free samples bucko"`,
	`"gotta pay for that"`,
	`"can't live on bread alone"`,
][this.oilhint]>>
[[>close]]

::oil vault
<<do
	this.oiled = true;
	this.scene.loseItem();
>>
*oil* *oil* *oil* *oil*
[[>close]]

::open vault
<<if this.oiled>>
	<<do
		this.gameObject.btn.enabled = false;
		const h = this.Hotspot({ label: 'entrance', texture: 'blank', x: -190, y: -160, use: {
			undefined: [`goto:goto soap`],
		}, });
		h.spr.width = 50;
		h.spr.height = 100;
		this.add(h);
		// TODO: sfx
		this.tween(this.gameObject.transform, 'x', this.gameObject.transform.x + 50, 1500, undefined, this.ease.cubicInOut);
		this.tween(this.gameObject.transform, 'y', this.gameObject.transform.y - 25, 1500, undefined, this.ease.cubicInOut);
		this.camPoint = this.gameObject.transform;
		const mook = this.scene.find('mook');
		if (mook) {
			mook.btn.use.undefined = [`"thanks for da door help kid"`, `"but still. back off"`];
		}
		this.scene.find('teller').use.undefined = [`"oh, you fixed da door?"`, `"coulda maybe picked a better time..."`, `"sigh"`];
		setTimeout(() => {
			this.camPoint = undefined;
			this.goto('close');
		}, 1500);
	>>
<<else>>
<<do this.gameObject = this.scene.player>>
"it's stuck"
[[>close]]
<<endif>>

::vault blocked
<<do this.gameObject = this.scene.find('mook'); this.shock(this.gameObject, 250);>>
"woah woah hold your horses"
>
"no one but da big boss is steppin' in dere"
[[>close]]

::goto soap
<<if this.scene.find('mook')>>
	<<do this.goto('vault blocked')>>
<<else>>
	<<do this.gotoItemRoom({ x: -190, y: -160 }, 'soap');>>
<<endif>>

::soap
soap
>
<<do
	this.scene.goto({ area: 'mouse town center', x: 50, y: -100 });
	this.goto('close');
>>



// 88d8b.d8b. .d8888b. dP    dP .d8888b. .d8888b.
// 88'`88'`88 88'  `88 88    88 Y8ooooo. 88ooood8
// 88  88  88 88.  .88 88.  .88       88 88.  ...
// dP  dP  dP `88888P' `88888P' `88888P' `88888P'
::windup horse
<<do this.scene.loseItem(true);>>
<<do this.gameObject = this.scene.player>>
"here you go"
>
<<do this.gameObject = this.scene.find('horse')>>
*wind*
>
*wind-wind*
>
"*whinny*"
<<do
	this.destroy(this.horsePoly);
	this.horsePoly = null;
	const horse = this.scene.find('horse');
	const cart = this.scene.find('cart');
	this.tween(horse.transform, 'x', horse.transform.x - this.size.x, 1000, undefined, this.ease.cubicIn);
	this.tween(cart.transform, 'x', cart.transform.x - this.size.x, 1000, undefined, this.ease.cubicIn);
>>
>
<<do
	const farmer = this.scene.find('cheese farmer');
	this.gameObject = farmer;
	farmer.roam.target.x -= this.size.x;
>>
"h-hey, my horse!!"
>
<<do this.gameObject = this.scene.player>>
"at least the horse is out of the way..."
[[>close]]





::light match
<<if this.scene.sprCarrying.texture === this.tex('matchbox_lit')>>
<<do
	this.scene.loseItem();
	this.goto('close');
>>
<<else>>
<<do
	this.scene.sprCarrying.texture = this.tex('matchbox_lit');
	this.goto('close');
>>
<<endif>>


::gatehouse reject
<<do this.gameObject = this.scene.find('guard upper')>>
"hrghrh.. not allowed..."
>
<<do
	const spots = [
		{x: 59, y: -340},
		{x: 112, y: -269},
	];
	let spot;
	let d1 = Infinity;
	for (let i = 0; i < spots.length; ++i) {
		const d2 = Math.abs(spots[i].x - this.scene.player.transform.x) + Math.abs(spots[i].y - this.scene.player.transform.y);
		if (d2 < d1) {
			d1 = d2;
			spot = spots[i];
		}
	}
	this.scene.player.walkTo(spot.x, spot.y).then(() => this.goto('close'))
>>



::swap cutter
<<do
	const a = this.gameObject;
	const b = this.scene.carrying;
	this.scene.find(`cutter ${a.cookie} ${a.pos}`).spr.alpha = 0;
	this.scene.find(`cutter ${b.cookie} ${b.pos}`).spr.alpha = 0;
	[a.cookie, b.cookie] = [b.cookie, a.cookie];
	[a.carrying, b.carrying] = [b.carrying, a.carrying];
	this.scene.find(`cutter ${a.cookie} ${a.pos}`).spr.alpha = 1;
	this.scene.find(`cutter ${b.cookie} ${b.pos}`).spr.alpha = 1;
	this.scene.loseItem();
	this.goto('close');
>>




::The End
blah blah
>
<<do
	this.show('black', { scale: this.size.x });
	this.tween(this.scene.border.display.container, 'alpha', 0, 1000);
	this.tween(scene.camera.display.container, 'alpha', 0, 1000);
	
>>
blah blah
>
<<do
	this.character = '';
	this.show('title', { scale: 2 });
>>
<<print new Array(60).fill('\u200B').join('')>>
The End

[[Restart|this.restart()]]

::debug menu
<<do
	this.scene.strand.passages['area warp'] = { title: 'area warp', body: Object.keys(this.scene.areas).filter(i => i !== 'root').map(i => '[['+i+'|this.scene.goto({ area: "'+i+'" }); this.goto("close")]]').concat('[[back|this.back()]]').join('\n') };
>>
[[passage select>passage select]]
[[language select]]
[[area warp]]
[[teleport|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		this.scene.player.setPosition(p.x, p.y);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[toggle debugPhysics|window.debugPhysics=!window.debugPhysics]]
[[toggle player collision|this.scene.player.bodyCollision.body.isSensor = !this.scene.player.bodyCollision.body.isSensor]]
[[drawing tools]]
[[close]]
[[back|this.back()]]

::drawing tools
[[get coords|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		navigator.clipboard.writeText(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
		console.log(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[place props|
	const canvas = window.game.app.renderer.context.gl.canvas;

	const textures = () => Object.entries(resources).filter(([k,r]) => !k.match(/\.[2-9]\d*?$/) && !k.match(/^https?:/) && r?.baseTexture);

	let tex = 0;
	const spr = new this.PIXI.Sprite();
	spr.anchor.x = 0.5;
	spr.anchor.y = 1.0;
	this.scene.container.addChild(spr);
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		tex += d;
		const ts = textures();
		if (tex < 0) tex = ts.length - 1;
		tex %= ts.length;
		console.log(ts[tex][0]);
		spr.texture = ts[tex][1];
	};
	const onMove = (event) => {
		const p = this.mousePos(event);
		spr.x = Math.floor(p.x);
		spr.y = Math.floor(p.y);
	};
	const placed = [];
	let flip = false;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			if (placed.length) {
				const p = placed.pop();
				this.remove(p);
			}
			return;
		}
		if (event.shiftKey) {
			flip = !flip;
			spr.scale.x = flip ? -1 : 1;
			return;
		}
		const p = this.mousePos(event);
		const prop = this.Prop({ texture: textures()[tex][0], x: Math.floor(p.x), y: Math.floor(p.y), flip });
		placed.push(prop);
		this.add(prop);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		spr.destroy();
		const str = placed.map(p => `this.Prop({ texture: '${p.spr.texture.textureCacheIds[1]}', x: ${Math.floor(p.transform.x)}, y: ${Math.floor(p.transform.y)}${p.spr.scale.x < 0 ? ', flip: true' : ''} }),`).join('\n');
		navigator.clipboard.writeText(str);
		console.log(str);
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[draw walls|
	if (!window.debugPhysics) window.debugPhysics=true;
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	let poly;

	const getPos = (event) => {
		const p = this.mousePos(event);
		return [Math.round(p.x),Math.round(p.y)];
	};
	const makePoly = () => {
		if (poly) {
			this.destroy(poly);
		}
		if (verts.length > 0) {
			poly = this.Poly({ verts: verts.flat(), width }, { plugin: { interactive: true }});
			// this.add(poly);
		} else {
			poly = null;
		}
	};

	let width = 20;
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		width += d;
		width = Math.max(1, width);
		makePoly();
	};
	const onMove = (event) => {
		if (event.ctrlKey) return;
		event.preventDefault();
		event.stopPropagation();
		verts.pop();
		verts.push(getPos(event));
		makePoly();
	};
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			verts.pop();
		} else {
			verts.push(getPos(event));
		}
		makePoly();
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('pointerup', () => {
			canvas.removeEventListener('pointermove', onMove);
		}, { once: true });
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		if (poly) {
			navigator.clipboard.writeText(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}]${width === 20 ? '' : `, width: ${width}`} }),`);
			console.log(`this.Poly({ verts: [${verts.map(i => i.join(',')).join(', ')}]${width === 20 ? '' : `, width: ${width}`} }),`);
			this.scene.drop(poly);
		}
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[back|this.back()]]

::main
<<do
	this.sfx('voiceDefault');
	this.scrim(0, 3000);
	this.goto('close');
>>
